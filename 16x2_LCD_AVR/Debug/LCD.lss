
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002e44  00002eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001974  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b11  00000000  00000000  00004838  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005349  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000054a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000767d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000877e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2c 14 	call	0x2858	; 0x2858 <main>
      7a:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <Dio_SetPinDirection>:
 */

#include "DIO_Int.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	27 97       	sbiw	r28, 0x07	; 7
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <Dio_SetPinDirection+0x22>
     cae:	ee c0       	rjmp	.+476    	; 0xe8c <Dio_SetPinDirection+0x1fe>
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <Dio_SetPinDirection+0x2a>
     cb6:	ea c0       	rjmp	.+468    	; 0xe8c <Dio_SetPinDirection+0x1fe>
	{
		if(Direction==OUTPUT)
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <Dio_SetPinDirection+0x32>
     cbe:	6f c0       	rjmp	.+222    	; 0xd9e <Dio_SetPinDirection+0x110>
		{
			switch(GroupNo)
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3f 83       	std	Y+7, r19	; 0x07
     cc8:	2e 83       	std	Y+6, r18	; 0x06
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	9f 81       	ldd	r25, Y+7	; 0x07
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 05       	cpc	r25, r1
     cd2:	49 f1       	breq	.+82     	; 0xd26 <Dio_SetPinDirection+0x98>
     cd4:	2e 81       	ldd	r18, Y+6	; 0x06
     cd6:	3f 81       	ldd	r19, Y+7	; 0x07
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	2c f4       	brge	.+10     	; 0xce8 <Dio_SetPinDirection+0x5a>
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	9f 81       	ldd	r25, Y+7	; 0x07
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	61 f0       	breq	.+24     	; 0xcfe <Dio_SetPinDirection+0x70>
     ce6:	d2 c0       	rjmp	.+420    	; 0xe8c <Dio_SetPinDirection+0x1fe>
     ce8:	2e 81       	ldd	r18, Y+6	; 0x06
     cea:	3f 81       	ldd	r19, Y+7	; 0x07
     cec:	22 30       	cpi	r18, 0x02	; 2
     cee:	31 05       	cpc	r19, r1
     cf0:	71 f1       	breq	.+92     	; 0xd4e <Dio_SetPinDirection+0xc0>
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	9f 81       	ldd	r25, Y+7	; 0x07
     cf6:	83 30       	cpi	r24, 0x03	; 3
     cf8:	91 05       	cpc	r25, r1
     cfa:	e9 f1       	breq	.+122    	; 0xd76 <Dio_SetPinDirection+0xe8>
     cfc:	c7 c0       	rjmp	.+398    	; 0xe8c <Dio_SetPinDirection+0x1fe>
			{
			case GroupA: SET_BIT(DDRA, PinNo); break;
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <Dio_SetPinDirection+0x8e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <Dio_SetPinDirection+0x8a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	b3 c0       	rjmp	.+358    	; 0xe8c <Dio_SetPinDirection+0x1fe>
			case GroupB: SET_BIT(DDRB, PinNo); break;
     d26:	a7 e3       	ldi	r26, 0x37	; 55
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e3       	ldi	r30, 0x37	; 55
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <Dio_SetPinDirection+0xb6>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <Dio_SetPinDirection+0xb2>
     d48:	84 2b       	or	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	9f c0       	rjmp	.+318    	; 0xe8c <Dio_SetPinDirection+0x1fe>
			case GroupC: SET_BIT(DDRC, PinNo); break;
     d4e:	a4 e3       	ldi	r26, 0x34	; 52
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e4 e3       	ldi	r30, 0x34	; 52
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <Dio_SetPinDirection+0xde>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <Dio_SetPinDirection+0xda>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	8b c0       	rjmp	.+278    	; 0xe8c <Dio_SetPinDirection+0x1fe>
			case GroupD: SET_BIT(DDRD, PinNo); break;
     d76:	a1 e3       	ldi	r26, 0x31	; 49
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 e3       	ldi	r30, 0x31	; 49
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <Dio_SetPinDirection+0x106>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <Dio_SetPinDirection+0x102>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	77 c0       	rjmp	.+238    	; 0xe8c <Dio_SetPinDirection+0x1fe>
			}
		}
		else if(Direction==INPUT)
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	88 23       	and	r24, r24
     da2:	09 f0       	breq	.+2      	; 0xda6 <Dio_SetPinDirection+0x118>
     da4:	73 c0       	rjmp	.+230    	; 0xe8c <Dio_SetPinDirection+0x1fe>
		{
			switch(GroupNo)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3d 83       	std	Y+5, r19	; 0x05
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	59 f1       	breq	.+86     	; 0xe10 <Dio_SetPinDirection+0x182>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <Dio_SetPinDirection+0x140>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f0       	breq	.+26     	; 0xde6 <Dio_SetPinDirection+0x158>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <Dio_SetPinDirection+0x1fe>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	89 f1       	breq	.+98     	; 0xe3a <Dio_SetPinDirection+0x1ac>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <Dio_SetPinDirection+0x156>
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <Dio_SetPinDirection+0x1d6>
     de4:	53 c0       	rjmp	.+166    	; 0xe8c <Dio_SetPinDirection+0x1fe>
			{
			case GroupA: CLR_BIT(DDRA, PinNo); break;
     de6:	aa e3       	ldi	r26, 0x3A	; 58
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e3       	ldi	r30, 0x3A	; 58
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <Dio_SetPinDirection+0x176>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <Dio_SetPinDirection+0x172>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	3e c0       	rjmp	.+124    	; 0xe8c <Dio_SetPinDirection+0x1fe>
			case GroupB: CLR_BIT(DDRB, PinNo); break;
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <Dio_SetPinDirection+0x1a0>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <Dio_SetPinDirection+0x19c>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	29 c0       	rjmp	.+82     	; 0xe8c <Dio_SetPinDirection+0x1fe>
			case GroupC: CLR_BIT(DDRC, PinNo); break;
     e3a:	a4 e3       	ldi	r26, 0x34	; 52
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <Dio_SetPinDirection+0x1ca>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <Dio_SetPinDirection+0x1c6>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <Dio_SetPinDirection+0x1fe>
			case GroupD: CLR_BIT(DDRD, PinNo); break;
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <Dio_SetPinDirection+0x1f4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <Dio_SetPinDirection+0x1f0>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
		else
		{
			//wrong Direction do noting
		}
	}
}
     e8c:	27 96       	adiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	27 97       	sbiw	r28, 0x07	; 7
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	6a 83       	std	Y+2, r22	; 0x02
     eb6:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	84 30       	cpi	r24, 0x04	; 4
     ebc:	08 f0       	brcs	.+2      	; 0xec0 <Dio_SetPinValue+0x22>
     ebe:	ee c0       	rjmp	.+476    	; 0x109c <Dio_SetPinValue+0x1fe>
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <Dio_SetPinValue+0x2a>
     ec6:	ea c0       	rjmp	.+468    	; 0x109c <Dio_SetPinValue+0x1fe>
		{
			if(Value==LOW)
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	88 23       	and	r24, r24
     ecc:	09 f0       	breq	.+2      	; 0xed0 <Dio_SetPinValue+0x32>
     ece:	74 c0       	rjmp	.+232    	; 0xfb8 <Dio_SetPinValue+0x11a>
			{
				switch(GroupNo)
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3f 83       	std	Y+7, r19	; 0x07
     ed8:	2e 83       	std	Y+6, r18	; 0x06
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	59 f1       	breq	.+86     	; 0xf3a <Dio_SetPinValue+0x9c>
     ee4:	2e 81       	ldd	r18, Y+6	; 0x06
     ee6:	3f 81       	ldd	r19, Y+7	; 0x07
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	2c f4       	brge	.+10     	; 0xef8 <Dio_SetPinValue+0x5a>
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	9f 81       	ldd	r25, Y+7	; 0x07
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	69 f0       	breq	.+26     	; 0xf10 <Dio_SetPinValue+0x72>
     ef6:	d2 c0       	rjmp	.+420    	; 0x109c <Dio_SetPinValue+0x1fe>
     ef8:	2e 81       	ldd	r18, Y+6	; 0x06
     efa:	3f 81       	ldd	r19, Y+7	; 0x07
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	89 f1       	breq	.+98     	; 0xf64 <Dio_SetPinValue+0xc6>
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <Dio_SetPinValue+0x70>
     f0c:	40 c0       	rjmp	.+128    	; 0xf8e <Dio_SetPinValue+0xf0>
     f0e:	c6 c0       	rjmp	.+396    	; 0x109c <Dio_SetPinValue+0x1fe>
				{
				case GroupA: CLR_BIT(PORTA, PinNo); break;
     f10:	ab e3       	ldi	r26, 0x3B	; 59
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	eb e3       	ldi	r30, 0x3B	; 59
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <Dio_SetPinValue+0x90>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <Dio_SetPinValue+0x8c>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	b1 c0       	rjmp	.+354    	; 0x109c <Dio_SetPinValue+0x1fe>
				case GroupB: CLR_BIT(PORTB, PinNo); break;
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <Dio_SetPinValue+0xba>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <Dio_SetPinValue+0xb6>
     f5c:	80 95       	com	r24
     f5e:	84 23       	and	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	9c c0       	rjmp	.+312    	; 0x109c <Dio_SetPinValue+0x1fe>
				case GroupC: CLR_BIT(PORTC, PinNo); break;
     f64:	a5 e3       	ldi	r26, 0x35	; 53
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e3       	ldi	r30, 0x35	; 53
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <Dio_SetPinValue+0xe4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <Dio_SetPinValue+0xe0>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	87 c0       	rjmp	.+270    	; 0x109c <Dio_SetPinValue+0x1fe>
				case GroupD: CLR_BIT(PORTD, PinNo); break;
     f8e:	a2 e3       	ldi	r26, 0x32	; 50
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e2 e3       	ldi	r30, 0x32	; 50
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <Dio_SetPinValue+0x10e>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <Dio_SetPinValue+0x10a>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	72 c0       	rjmp	.+228    	; 0x109c <Dio_SetPinValue+0x1fe>
				}
			}
			else if(Value==HIGH)
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <Dio_SetPinValue+0x122>
     fbe:	6e c0       	rjmp	.+220    	; 0x109c <Dio_SetPinValue+0x1fe>
			{
				switch(GroupNo)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3d 83       	std	Y+5, r19	; 0x05
     fc8:	2c 83       	std	Y+4, r18	; 0x04
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	49 f1       	breq	.+82     	; 0x1026 <Dio_SetPinValue+0x188>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <Dio_SetPinValue+0x14a>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	61 f0       	breq	.+24     	; 0xffe <Dio_SetPinValue+0x160>
     fe6:	5a c0       	rjmp	.+180    	; 0x109c <Dio_SetPinValue+0x1fe>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	71 f1       	breq	.+92     	; 0x104e <Dio_SetPinValue+0x1b0>
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	91 05       	cpc	r25, r1
     ffa:	e9 f1       	breq	.+122    	; 0x1076 <Dio_SetPinValue+0x1d8>
     ffc:	4f c0       	rjmp	.+158    	; 0x109c <Dio_SetPinValue+0x1fe>
				{
				case GroupA: SET_BIT(PORTA, PinNo); break;
     ffe:	ab e3       	ldi	r26, 0x3B	; 59
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	eb e3       	ldi	r30, 0x3B	; 59
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <Dio_SetPinValue+0x17e>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <Dio_SetPinValue+0x17a>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	3b c0       	rjmp	.+118    	; 0x109c <Dio_SetPinValue+0x1fe>
				case GroupB: SET_BIT(PORTB, PinNo); break;
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <Dio_SetPinValue+0x1a6>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <Dio_SetPinValue+0x1a2>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	27 c0       	rjmp	.+78     	; 0x109c <Dio_SetPinValue+0x1fe>
				case GroupC: SET_BIT(PORTC, PinNo); break;
    104e:	a5 e3       	ldi	r26, 0x35	; 53
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e3       	ldi	r30, 0x35	; 53
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <Dio_SetPinValue+0x1ce>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <Dio_SetPinValue+0x1ca>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	13 c0       	rjmp	.+38     	; 0x109c <Dio_SetPinValue+0x1fe>
				case GroupD: SET_BIT(PORTD, PinNo); break;
    1076:	a2 e3       	ldi	r26, 0x32	; 50
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e2 e3       	ldi	r30, 0x32	; 50
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <Dio_SetPinValue+0x1f6>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <Dio_SetPinValue+0x1f2>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
			else
			{
				//wrong Direction do noting
			}
		}
}
    109c:	27 96       	adiw	r28, 0x07	; 7
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <Dio_GetPinValue+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <Dio_GetPinValue+0x8>
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Ret_PinValue=0;
    10c0:	19 82       	std	Y+1, r1	; 0x01

	if((GroupNo<=GroupD) && (PinNo<=PIN7))
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <Dio_GetPinValue+0x1c>
    10c8:	6c c0       	rjmp	.+216    	; 0x11a2 <Dio_GetPinValue+0xf4>
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 30       	cpi	r24, 0x08	; 8
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <Dio_GetPinValue+0x24>
    10d0:	68 c0       	rjmp	.+208    	; 0x11a2 <Dio_GetPinValue+0xf4>
	{
		switch(GroupNo)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3d 83       	std	Y+5, r19	; 0x05
    10da:	2c 83       	std	Y+4, r18	; 0x04
    10dc:	4c 81       	ldd	r20, Y+4	; 0x04
    10de:	5d 81       	ldd	r21, Y+5	; 0x05
    10e0:	41 30       	cpi	r20, 0x01	; 1
    10e2:	51 05       	cpc	r21, r1
    10e4:	41 f1       	breq	.+80     	; 0x1136 <Dio_GetPinValue+0x88>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	91 05       	cpc	r25, r1
    10ee:	34 f4       	brge	.+12     	; 0x10fc <Dio_GetPinValue+0x4e>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	21 15       	cp	r18, r1
    10f6:	31 05       	cpc	r19, r1
    10f8:	61 f0       	breq	.+24     	; 0x1112 <Dio_GetPinValue+0x64>
    10fa:	55 c0       	rjmp	.+170    	; 0x11a6 <Dio_GetPinValue+0xf8>
    10fc:	4c 81       	ldd	r20, Y+4	; 0x04
    10fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1100:	42 30       	cpi	r20, 0x02	; 2
    1102:	51 05       	cpc	r21, r1
    1104:	51 f1       	breq	.+84     	; 0x115a <Dio_GetPinValue+0xac>
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	91 05       	cpc	r25, r1
    110e:	b9 f1       	breq	.+110    	; 0x117e <Dio_GetPinValue+0xd0>
    1110:	4a c0       	rjmp	.+148    	; 0x11a6 <Dio_GetPinValue+0xf8>
		{
		case GroupA: Ret_PinValue=GET_BIT(PINA, PinNo); break;
    1112:	e9 e3       	ldi	r30, 0x39	; 57
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <Dio_GetPinValue+0x7c>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <Dio_GetPinValue+0x78>
    112e:	ca 01       	movw	r24, r20
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	38 c0       	rjmp	.+112    	; 0x11a6 <Dio_GetPinValue+0xf8>
		case GroupB: Ret_PinValue=GET_BIT(PINB, PinNo); break;
    1136:	e6 e3       	ldi	r30, 0x36	; 54
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a9 01       	movw	r20, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <Dio_GetPinValue+0xa0>
    114a:	55 95       	asr	r21
    114c:	47 95       	ror	r20
    114e:	8a 95       	dec	r24
    1150:	e2 f7       	brpl	.-8      	; 0x114a <Dio_GetPinValue+0x9c>
    1152:	ca 01       	movw	r24, r20
    1154:	81 70       	andi	r24, 0x01	; 1
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	26 c0       	rjmp	.+76     	; 0x11a6 <Dio_GetPinValue+0xf8>
		case GroupC: Ret_PinValue=GET_BIT(PINC, PinNo); break;
    115a:	e3 e3       	ldi	r30, 0x33	; 51
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a9 01       	movw	r20, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <Dio_GetPinValue+0xc4>
    116e:	55 95       	asr	r21
    1170:	47 95       	ror	r20
    1172:	8a 95       	dec	r24
    1174:	e2 f7       	brpl	.-8      	; 0x116e <Dio_GetPinValue+0xc0>
    1176:	ca 01       	movw	r24, r20
    1178:	81 70       	andi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <Dio_GetPinValue+0xf8>
		case GroupD: Ret_PinValue=GET_BIT(PIND, PinNo); break;
    117e:	e0 e3       	ldi	r30, 0x30	; 48
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a9 01       	movw	r20, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <Dio_GetPinValue+0xe8>
    1192:	55 95       	asr	r21
    1194:	47 95       	ror	r20
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <Dio_GetPinValue+0xe4>
    119a:	ca 01       	movw	r24, r20
    119c:	81 70       	andi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <Dio_GetPinValue+0xf8>
		}
	}
	else
		Ret_PinValue=0xFF;
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	89 83       	std	Y+1, r24	; 0x01

return Ret_PinValue;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <LCD_Init>:
#include <stdio.h>
#define FourBitLCD
#define LCD_Port PORTA

void LCD_Init(void)
{
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	c4 55       	subi	r28, 0x54	; 84
    11c6:	d0 40       	sbci	r29, 0x00	; 0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(1);
	LCD_WriteCommand(0b00000110);//entry mode set
#endif
#ifdef FourBitLCD
	//RS c0
	Dio_SetPinDirection(GroupB, PIN1, OUTPUT);
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	61 e0       	ldi	r22, 0x01	; 1
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_SetPinDirection>
	//RW
	Dio_SetPinDirection(GroupB, PIN2, OUTPUT);
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	62 e0       	ldi	r22, 0x02	; 2
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_SetPinDirection>
	//E
	Dio_SetPinDirection(GroupB, PIN3, OUTPUT);
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	63 e0       	ldi	r22, 0x03	; 3
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_SetPinDirection>
	//data lines
	Dio_SetPinDirection(LCD_Port, PIN4, OUTPUT);
    11f0:	eb e3       	ldi	r30, 0x3B	; 59
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	64 e0       	ldi	r22, 0x04	; 4
    11f8:	41 e0       	ldi	r20, 0x01	; 1
    11fa:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_Port, PIN5, OUTPUT);
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	65 e0       	ldi	r22, 0x05	; 5
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_Port, PIN6, OUTPUT);
    120c:	eb e3       	ldi	r30, 0x3B	; 59
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	66 e0       	ldi	r22, 0x06	; 6
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_Port, PIN7, OUTPUT);
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	67 e0       	ldi	r22, 0x07	; 7
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_SetPinDirection>
    1228:	fe 01       	movw	r30, r28
    122a:	ef 5a       	subi	r30, 0xAF	; 175
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a0 ef       	ldi	r26, 0xF0	; 240
    1234:	b1 e4       	ldi	r27, 0x41	; 65
    1236:	80 83       	st	Z, r24
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	a2 83       	std	Z+2, r26	; 0x02
    123c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123e:	8e 01       	movw	r16, r28
    1240:	03 5b       	subi	r16, 0xB3	; 179
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	fe 01       	movw	r30, r28
    1246:	ef 5a       	subi	r30, 0xAF	; 175
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	4a e7       	ldi	r20, 0x7A	; 122
    1258:	55 e4       	ldi	r21, 0x45	; 69
    125a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    126c:	fe 01       	movw	r30, r28
    126e:	e3 5b       	subi	r30, 0xB3	; 179
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	44 f4       	brge	.+16     	; 0x129a <LCD_Init+0xe2>
		__ticks = 1;
    128a:	fe 01       	movw	r30, r28
    128c:	e5 5b       	subi	r30, 0xB5	; 181
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	64 c0       	rjmp	.+200    	; 0x1362 <LCD_Init+0x1aa>
	else if (__tmp > 65535)
    129a:	fe 01       	movw	r30, r28
    129c:	e3 5b       	subi	r30, 0xB3	; 179
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <LCD_Init+0x102>
    12b8:	43 c0       	rjmp	.+134    	; 0x1340 <LCD_Init+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	fe 01       	movw	r30, r28
    12bc:	ef 5a       	subi	r30, 0xAF	; 175
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8e 01       	movw	r16, r28
    12da:	05 5b       	subi	r16, 0xB5	; 181
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	f8 01       	movw	r30, r16
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
    12f0:	1f c0       	rjmp	.+62     	; 0x1330 <LCD_Init+0x178>
    12f2:	fe 01       	movw	r30, r28
    12f4:	e7 5b       	subi	r30, 0xB7	; 183
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 e9       	ldi	r24, 0x90	; 144
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1300:	fe 01       	movw	r30, r28
    1302:	e7 5b       	subi	r30, 0xB7	; 183
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <LCD_Init+0x152>
    130e:	fe 01       	movw	r30, r28
    1310:	e7 5b       	subi	r30, 0xB7	; 183
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	de 01       	movw	r26, r28
    131a:	a5 5b       	subi	r26, 0xB5	; 181
    131c:	bf 4f       	sbci	r27, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	e5 5b       	subi	r30, 0xB5	; 181
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	9c 93       	st	X, r25
    132e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	fe 01       	movw	r30, r28
    1332:	e5 5b       	subi	r30, 0xB5	; 181
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	d1 f6       	brne	.-76     	; 0x12f2 <LCD_Init+0x13a>
    133e:	27 c0       	rjmp	.+78     	; 0x138e <LCD_Init+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	8e 01       	movw	r16, r28
    1342:	05 5b       	subi	r16, 0xB5	; 181
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	fe 01       	movw	r30, r28
    1348:	e3 5b       	subi	r30, 0xB3	; 179
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	f8 01       	movw	r30, r16
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	de 01       	movw	r26, r28
    1364:	a9 5b       	subi	r26, 0xB9	; 185
    1366:	bf 4f       	sbci	r27, 0xFF	; 255
    1368:	fe 01       	movw	r30, r28
    136a:	e5 5b       	subi	r30, 0xB5	; 181
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	8d 93       	st	X+, r24
    1374:	9c 93       	st	X, r25
    1376:	fe 01       	movw	r30, r28
    1378:	e9 5b       	subi	r30, 0xB9	; 185
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <LCD_Init+0x1c8>
    1384:	fe 01       	movw	r30, r28
    1386:	e9 5b       	subi	r30, 0xB9	; 185
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_WriteCommand(0x02);
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
    1396:	fe 01       	movw	r30, r28
    1398:	ed 5b       	subi	r30, 0xBD	; 189
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a0 e8       	ldi	r26, 0x80	; 128
    13a2:	bf e3       	ldi	r27, 0x3F	; 63
    13a4:	80 83       	st	Z, r24
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	a2 83       	std	Z+2, r26	; 0x02
    13aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	8e 01       	movw	r16, r28
    13ae:	01 5c       	subi	r16, 0xC1	; 193
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	fe 01       	movw	r30, r28
    13b4:	ed 5b       	subi	r30, 0xBD	; 189
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	60 81       	ld	r22, Z
    13ba:	71 81       	ldd	r23, Z+1	; 0x01
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a e7       	ldi	r20, 0x7A	; 122
    13c6:	55 e4       	ldi	r21, 0x45	; 69
    13c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	f8 01       	movw	r30, r16
    13d2:	80 83       	st	Z, r24
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	a2 83       	std	Z+2, r26	; 0x02
    13d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13da:	fe 01       	movw	r30, r28
    13dc:	ff 96       	adiw	r30, 0x3f	; 63
    13de:	60 81       	ld	r22, Z
    13e0:	71 81       	ldd	r23, Z+1	; 0x01
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	93 81       	ldd	r25, Z+3	; 0x03
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13f2:	88 23       	and	r24, r24
    13f4:	2c f4       	brge	.+10     	; 0x1400 <LCD_Init+0x248>
		__ticks = 1;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9e af       	std	Y+62, r25	; 0x3e
    13fc:	8d af       	std	Y+61, r24	; 0x3d
    13fe:	46 c0       	rjmp	.+140    	; 0x148c <LCD_Init+0x2d4>
	else if (__tmp > 65535)
    1400:	fe 01       	movw	r30, r28
    1402:	ff 96       	adiw	r30, 0x3f	; 63
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	93 81       	ldd	r25, Z+3	; 0x03
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	4f e7       	ldi	r20, 0x7F	; 127
    1412:	57 e4       	ldi	r21, 0x47	; 71
    1414:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1418:	18 16       	cp	r1, r24
    141a:	64 f5       	brge	.+88     	; 0x1474 <LCD_Init+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141c:	fe 01       	movw	r30, r28
    141e:	ed 5b       	subi	r30, 0xBD	; 189
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e af       	std	Y+62, r25	; 0x3e
    1448:	8d af       	std	Y+61, r24	; 0x3d
    144a:	0f c0       	rjmp	.+30     	; 0x146a <LCD_Init+0x2b2>
    144c:	80 e9       	ldi	r24, 0x90	; 144
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	9c af       	std	Y+60, r25	; 0x3c
    1452:	8b af       	std	Y+59, r24	; 0x3b
    1454:	8b ad       	ldd	r24, Y+59	; 0x3b
    1456:	9c ad       	ldd	r25, Y+60	; 0x3c
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_Init+0x2a0>
    145c:	9c af       	std	Y+60, r25	; 0x3c
    145e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8d ad       	ldd	r24, Y+61	; 0x3d
    1462:	9e ad       	ldd	r25, Y+62	; 0x3e
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9e af       	std	Y+62, r25	; 0x3e
    1468:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8d ad       	ldd	r24, Y+61	; 0x3d
    146c:	9e ad       	ldd	r25, Y+62	; 0x3e
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <LCD_Init+0x294>
    1472:	16 c0       	rjmp	.+44     	; 0x14a0 <LCD_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	fe 01       	movw	r30, r28
    1476:	ff 96       	adiw	r30, 0x3f	; 63
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9e af       	std	Y+62, r25	; 0x3e
    148a:	8d af       	std	Y+61, r24	; 0x3d
    148c:	8d ad       	ldd	r24, Y+61	; 0x3d
    148e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1490:	9a af       	std	Y+58, r25	; 0x3a
    1492:	89 af       	std	Y+57, r24	; 0x39
    1494:	89 ad       	ldd	r24, Y+57	; 0x39
    1496:	9a ad       	ldd	r25, Y+58	; 0x3a
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <LCD_Init+0x2e0>
    149c:	9a af       	std	Y+58, r25	; 0x3a
    149e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_WriteCommand(0x28);
    14a0:	88 e2       	ldi	r24, 0x28	; 40
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a0 e8       	ldi	r26, 0x80	; 128
    14ae:	bf e3       	ldi	r27, 0x3F	; 63
    14b0:	8d ab       	std	Y+53, r24	; 0x35
    14b2:	9e ab       	std	Y+54, r25	; 0x36
    14b4:	af ab       	std	Y+55, r26	; 0x37
    14b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b8:	6d a9       	ldd	r22, Y+53	; 0x35
    14ba:	7e a9       	ldd	r23, Y+54	; 0x36
    14bc:	8f a9       	ldd	r24, Y+55	; 0x37
    14be:	98 ad       	ldd	r25, Y+56	; 0x38
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	55 e4       	ldi	r21, 0x45	; 69
    14c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	89 ab       	std	Y+49, r24	; 0x31
    14d2:	9a ab       	std	Y+50, r25	; 0x32
    14d4:	ab ab       	std	Y+51, r26	; 0x33
    14d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14d8:	69 a9       	ldd	r22, Y+49	; 0x31
    14da:	7a a9       	ldd	r23, Y+50	; 0x32
    14dc:	8b a9       	ldd	r24, Y+51	; 0x33
    14de:	9c a9       	ldd	r25, Y+52	; 0x34
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <LCD_Init+0x342>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	98 ab       	std	Y+48, r25	; 0x30
    14f6:	8f a7       	std	Y+47, r24	; 0x2f
    14f8:	3f c0       	rjmp	.+126    	; 0x1578 <LCD_Init+0x3c0>
	else if (__tmp > 65535)
    14fa:	69 a9       	ldd	r22, Y+49	; 0x31
    14fc:	7a a9       	ldd	r23, Y+50	; 0x32
    14fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1500:	9c a9       	ldd	r25, Y+52	; 0x34
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	4c f5       	brge	.+82     	; 0x1564 <LCD_Init+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1512:	6d a9       	ldd	r22, Y+53	; 0x35
    1514:	7e a9       	ldd	r23, Y+54	; 0x36
    1516:	8f a9       	ldd	r24, Y+55	; 0x37
    1518:	98 ad       	ldd	r25, Y+56	; 0x38
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	98 ab       	std	Y+48, r25	; 0x30
    1538:	8f a7       	std	Y+47, r24	; 0x2f
    153a:	0f c0       	rjmp	.+30     	; 0x155a <LCD_Init+0x3a2>
    153c:	80 e9       	ldi	r24, 0x90	; 144
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	9e a7       	std	Y+46, r25	; 0x2e
    1542:	8d a7       	std	Y+45, r24	; 0x2d
    1544:	8d a5       	ldd	r24, Y+45	; 0x2d
    1546:	9e a5       	ldd	r25, Y+46	; 0x2e
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <LCD_Init+0x390>
    154c:	9e a7       	std	Y+46, r25	; 0x2e
    154e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1550:	8f a5       	ldd	r24, Y+47	; 0x2f
    1552:	98 a9       	ldd	r25, Y+48	; 0x30
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	98 ab       	std	Y+48, r25	; 0x30
    1558:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	8f a5       	ldd	r24, Y+47	; 0x2f
    155c:	98 a9       	ldd	r25, Y+48	; 0x30
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	69 f7       	brne	.-38     	; 0x153c <LCD_Init+0x384>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <LCD_Init+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1564:	69 a9       	ldd	r22, Y+49	; 0x31
    1566:	7a a9       	ldd	r23, Y+50	; 0x32
    1568:	8b a9       	ldd	r24, Y+51	; 0x33
    156a:	9c a9       	ldd	r25, Y+52	; 0x34
    156c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	98 ab       	std	Y+48, r25	; 0x30
    1576:	8f a7       	std	Y+47, r24	; 0x2f
    1578:	8f a5       	ldd	r24, Y+47	; 0x2f
    157a:	98 a9       	ldd	r25, Y+48	; 0x30
    157c:	9c a7       	std	Y+44, r25	; 0x2c
    157e:	8b a7       	std	Y+43, r24	; 0x2b
    1580:	8b a5       	ldd	r24, Y+43	; 0x2b
    1582:	9c a5       	ldd	r25, Y+44	; 0x2c
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <LCD_Init+0x3cc>
    1588:	9c a7       	std	Y+44, r25	; 0x2c
    158a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_WriteCommand(0x0c);
    158c:	8c e0       	ldi	r24, 0x0C	; 12
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 e8       	ldi	r26, 0x80	; 128
    159a:	bf e3       	ldi	r27, 0x3F	; 63
    159c:	8f a3       	std	Y+39, r24	; 0x27
    159e:	98 a7       	std	Y+40, r25	; 0x28
    15a0:	a9 a7       	std	Y+41, r26	; 0x29
    15a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	6f a1       	ldd	r22, Y+39	; 0x27
    15a6:	78 a5       	ldd	r23, Y+40	; 0x28
    15a8:	89 a5       	ldd	r24, Y+41	; 0x29
    15aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a e7       	ldi	r20, 0x7A	; 122
    15b2:	55 e4       	ldi	r21, 0x45	; 69
    15b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	8b a3       	std	Y+35, r24	; 0x23
    15be:	9c a3       	std	Y+36, r25	; 0x24
    15c0:	ad a3       	std	Y+37, r26	; 0x25
    15c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15c4:	6b a1       	ldd	r22, Y+35	; 0x23
    15c6:	7c a1       	ldd	r23, Y+36	; 0x24
    15c8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ca:	9e a1       	ldd	r25, Y+38	; 0x26
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	5f e3       	ldi	r21, 0x3F	; 63
    15d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15d8:	88 23       	and	r24, r24
    15da:	2c f4       	brge	.+10     	; 0x15e6 <LCD_Init+0x42e>
		__ticks = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9a a3       	std	Y+34, r25	; 0x22
    15e2:	89 a3       	std	Y+33, r24	; 0x21
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <LCD_Init+0x4ac>
	else if (__tmp > 65535)
    15e6:	6b a1       	ldd	r22, Y+35	; 0x23
    15e8:	7c a1       	ldd	r23, Y+36	; 0x24
    15ea:	8d a1       	ldd	r24, Y+37	; 0x25
    15ec:	9e a1       	ldd	r25, Y+38	; 0x26
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	4c f5       	brge	.+82     	; 0x1650 <LCD_Init+0x498>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1600:	78 a5       	ldd	r23, Y+40	; 0x28
    1602:	89 a5       	ldd	r24, Y+41	; 0x29
    1604:	9a a5       	ldd	r25, Y+42	; 0x2a
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e2       	ldi	r20, 0x20	; 32
    160c:	51 e4       	ldi	r21, 0x41	; 65
    160e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9a a3       	std	Y+34, r25	; 0x22
    1624:	89 a3       	std	Y+33, r24	; 0x21
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <LCD_Init+0x48e>
    1628:	80 e9       	ldi	r24, 0x90	; 144
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	98 a3       	std	Y+32, r25	; 0x20
    162e:	8f 8f       	std	Y+31, r24	; 0x1f
    1630:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1632:	98 a1       	ldd	r25, Y+32	; 0x20
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_Init+0x47c>
    1638:	98 a3       	std	Y+32, r25	; 0x20
    163a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	89 a1       	ldd	r24, Y+33	; 0x21
    163e:	9a a1       	ldd	r25, Y+34	; 0x22
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	9a a3       	std	Y+34, r25	; 0x22
    1644:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	89 a1       	ldd	r24, Y+33	; 0x21
    1648:	9a a1       	ldd	r25, Y+34	; 0x22
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f7       	brne	.-38     	; 0x1628 <LCD_Init+0x470>
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <LCD_Init+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	6b a1       	ldd	r22, Y+35	; 0x23
    1652:	7c a1       	ldd	r23, Y+36	; 0x24
    1654:	8d a1       	ldd	r24, Y+37	; 0x25
    1656:	9e a1       	ldd	r25, Y+38	; 0x26
    1658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9a a3       	std	Y+34, r25	; 0x22
    1662:	89 a3       	std	Y+33, r24	; 0x21
    1664:	89 a1       	ldd	r24, Y+33	; 0x21
    1666:	9a a1       	ldd	r25, Y+34	; 0x22
    1668:	9e 8f       	std	Y+30, r25	; 0x1e
    166a:	8d 8f       	std	Y+29, r24	; 0x1d
    166c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    166e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_Init+0x4b8>
    1674:	9e 8f       	std	Y+30, r25	; 0x1e
    1676:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_WriteCommand(0x06);
    1678:	86 e0       	ldi	r24, 0x06	; 6
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e8       	ldi	r26, 0x80	; 128
    1686:	bf e3       	ldi	r27, 0x3F	; 63
    1688:	89 8f       	std	Y+25, r24	; 0x19
    168a:	9a 8f       	std	Y+26, r25	; 0x1a
    168c:	ab 8f       	std	Y+27, r26	; 0x1b
    168e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	69 8d       	ldd	r22, Y+25	; 0x19
    1692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a e7       	ldi	r20, 0x7A	; 122
    169e:	55 e4       	ldi	r21, 0x45	; 69
    16a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8d 8b       	std	Y+21, r24	; 0x15
    16aa:	9e 8b       	std	Y+22, r25	; 0x16
    16ac:	af 8b       	std	Y+23, r26	; 0x17
    16ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16b0:	6d 89       	ldd	r22, Y+21	; 0x15
    16b2:	7e 89       	ldd	r23, Y+22	; 0x16
    16b4:	8f 89       	ldd	r24, Y+23	; 0x17
    16b6:	98 8d       	ldd	r25, Y+24	; 0x18
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <LCD_Init+0x51a>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9c 8b       	std	Y+20, r25	; 0x14
    16ce:	8b 8b       	std	Y+19, r24	; 0x13
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <LCD_Init+0x598>
	else if (__tmp > 65535)
    16d2:	6d 89       	ldd	r22, Y+21	; 0x15
    16d4:	7e 89       	ldd	r23, Y+22	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <LCD_Init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	69 8d       	ldd	r22, Y+25	; 0x19
    16ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9c 8b       	std	Y+20, r25	; 0x14
    1710:	8b 8b       	std	Y+19, r24	; 0x13
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <LCD_Init+0x57a>
    1714:	80 e9       	ldi	r24, 0x90	; 144
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	9a 8b       	std	Y+18, r25	; 0x12
    171a:	89 8b       	std	Y+17, r24	; 0x11
    171c:	89 89       	ldd	r24, Y+17	; 0x11
    171e:	9a 89       	ldd	r25, Y+18	; 0x12
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_Init+0x568>
    1724:	9a 8b       	std	Y+18, r25	; 0x12
    1726:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	9c 89       	ldd	r25, Y+20	; 0x14
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9c 8b       	std	Y+20, r25	; 0x14
    1730:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8b 89       	ldd	r24, Y+19	; 0x13
    1734:	9c 89       	ldd	r25, Y+20	; 0x14
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <LCD_Init+0x55c>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <LCD_Init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6d 89       	ldd	r22, Y+21	; 0x15
    173e:	7e 89       	ldd	r23, Y+22	; 0x16
    1740:	8f 89       	ldd	r24, Y+23	; 0x17
    1742:	98 8d       	ldd	r25, Y+24	; 0x18
    1744:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9c 8b       	std	Y+20, r25	; 0x14
    174e:	8b 8b       	std	Y+19, r24	; 0x13
    1750:	8b 89       	ldd	r24, Y+19	; 0x13
    1752:	9c 89       	ldd	r25, Y+20	; 0x14
    1754:	98 8b       	std	Y+16, r25	; 0x10
    1756:	8f 87       	std	Y+15, r24	; 0x0f
    1758:	8f 85       	ldd	r24, Y+15	; 0x0f
    175a:	98 89       	ldd	r25, Y+16	; 0x10
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCD_Init+0x5a4>
    1760:	98 8b       	std	Y+16, r25	; 0x10
    1762:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_WriteCommand(0x01);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e0       	ldi	r26, 0x00	; 0
    1772:	b0 e4       	ldi	r27, 0x40	; 64
    1774:	8b 87       	std	Y+11, r24	; 0x0b
    1776:	9c 87       	std	Y+12, r25	; 0x0c
    1778:	ad 87       	std	Y+13, r26	; 0x0d
    177a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	6b 85       	ldd	r22, Y+11	; 0x0b
    177e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a e7       	ldi	r20, 0x7A	; 122
    178a:	55 e4       	ldi	r21, 0x45	; 69
    178c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	8f 83       	std	Y+7, r24	; 0x07
    1796:	98 87       	std	Y+8, r25	; 0x08
    1798:	a9 87       	std	Y+9, r26	; 0x09
    179a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <LCD_Init+0x606>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <LCD_Init+0x684>
	else if (__tmp > 65535)
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <LCD_Init+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17da:	8d 85       	ldd	r24, Y+13	; 0x0d
    17dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <LCD_Init+0x666>
    1800:	80 e9       	ldi	r24, 0x90	; 144
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_Init+0x654>
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <LCD_Init+0x648>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <LCD_Init+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD_Init+0x690>
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    1850:	cc 5a       	subi	r28, 0xAC	; 172
    1852:	df 4f       	sbci	r29, 0xFF	; 255
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	08 95       	ret

00001868 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Command)
{
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	c7 55       	subi	r28, 0x57	; 87
    1876:	d0 40       	sbci	r29, 0x00	; 0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	fe 01       	movw	r30, r28
    1884:	e9 5a       	subi	r30, 0xA9	; 169
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 83       	st	Z, r24
	_delay_ms(20);
	Dio_SetPinValue(GroupC, PIN2, LOW);	//set enable pin low
	_delay_ms(20);
#endif
#ifdef FourBitLCD
	LCD_Port = (LCD_Port & 0x0F) | (Command & 0xF0); //Sending upper nibble
    188a:	ab e3       	ldi	r26, 0x3B	; 59
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	eb e3       	ldi	r30, 0x3B	; 59
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	98 2f       	mov	r25, r24
    1896:	9f 70       	andi	r25, 0x0F	; 15
    1898:	fe 01       	movw	r30, r28
    189a:	e9 5a       	subi	r30, 0xA9	; 169
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	80 7f       	andi	r24, 0xF0	; 240
    18a2:	89 2b       	or	r24, r25
    18a4:	8c 93       	st	X, r24
	Dio_SetPinValue(GroupB, PIN1, LOW);	//RS low
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
	Dio_SetPinValue(GroupB, PIN2, LOW);	//RW low
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	62 e0       	ldi	r22, 0x02	; 2
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
	Dio_SetPinValue(GroupB, PIN3, HIGH);//set enable pin high
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	63 e0       	ldi	r22, 0x03	; 3
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
    18c4:	fe 01       	movw	r30, r28
    18c6:	ed 5a       	subi	r30, 0xAD	; 173
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e8       	ldi	r26, 0x80	; 128
    18d0:	bf e3       	ldi	r27, 0x3F	; 63
    18d2:	80 83       	st	Z, r24
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	a2 83       	std	Z+2, r26	; 0x02
    18d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18da:	8e 01       	movw	r16, r28
    18dc:	01 5b       	subi	r16, 0xB1	; 177
    18de:	1f 4f       	sbci	r17, 0xFF	; 255
    18e0:	fe 01       	movw	r30, r28
    18e2:	ed 5a       	subi	r30, 0xAD	; 173
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	2b ea       	ldi	r18, 0xAB	; 171
    18f0:	3a ea       	ldi	r19, 0xAA	; 170
    18f2:	4a ea       	ldi	r20, 0xAA	; 170
    18f4:	50 e4       	ldi	r21, 0x40	; 64
    18f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	f8 01       	movw	r30, r16
    1900:	80 83       	st	Z, r24
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	a2 83       	std	Z+2, r26	; 0x02
    1906:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1908:	fe 01       	movw	r30, r28
    190a:	e1 5b       	subi	r30, 0xB1	; 177
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	34 f4       	brge	.+12     	; 0x1932 <LCD_WriteCommand+0xca>
		__ticks = 1;
    1926:	fe 01       	movw	r30, r28
    1928:	e2 5b       	subi	r30, 0xB2	; 178
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	80 83       	st	Z, r24
    1930:	e0 c0       	rjmp	.+448    	; 0x1af2 <LCD_WriteCommand+0x28a>
	else if (__tmp > 255)
    1932:	fe 01       	movw	r30, r28
    1934:	e1 5b       	subi	r30, 0xB1	; 177
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4f e7       	ldi	r20, 0x7F	; 127
    1946:	53 e4       	ldi	r21, 0x43	; 67
    1948:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    194c:	18 16       	cp	r1, r24
    194e:	0c f0       	brlt	.+2      	; 0x1952 <LCD_WriteCommand+0xea>
    1950:	c0 c0       	rjmp	.+384    	; 0x1ad2 <LCD_WriteCommand+0x26a>
	{
		_delay_ms(__us / 1000.0);
    1952:	fe 01       	movw	r30, r28
    1954:	ed 5a       	subi	r30, 0xAD	; 173
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a e7       	ldi	r20, 0x7A	; 122
    1966:	54 e4       	ldi	r21, 0x44	; 68
    1968:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	fe 01       	movw	r30, r28
    1972:	e6 5b       	subi	r30, 0xB6	; 182
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 83       	st	Z, r24
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	a2 83       	std	Z+2, r26	; 0x02
    197c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	8e 01       	movw	r16, r28
    1980:	0a 5b       	subi	r16, 0xBA	; 186
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	fe 01       	movw	r30, r28
    1986:	e6 5b       	subi	r30, 0xB6	; 182
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4a e7       	ldi	r20, 0x7A	; 122
    1998:	55 e4       	ldi	r21, 0x45	; 69
    199a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	f8 01       	movw	r30, r16
    19a4:	80 83       	st	Z, r24
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	a2 83       	std	Z+2, r26	; 0x02
    19aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ac:	fe 01       	movw	r30, r28
    19ae:	ea 5b       	subi	r30, 0xBA	; 186
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	44 f4       	brge	.+16     	; 0x19da <LCD_WriteCommand+0x172>
		__ticks = 1;
    19ca:	fe 01       	movw	r30, r28
    19cc:	ec 5b       	subi	r30, 0xBC	; 188
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
    19d8:	64 c0       	rjmp	.+200    	; 0x1aa2 <LCD_WriteCommand+0x23a>
	else if (__tmp > 65535)
    19da:	fe 01       	movw	r30, r28
    19dc:	ea 5b       	subi	r30, 0xBA	; 186
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	3f ef       	ldi	r19, 0xFF	; 255
    19ec:	4f e7       	ldi	r20, 0x7F	; 127
    19ee:	57 e4       	ldi	r21, 0x47	; 71
    19f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	0c f0       	brlt	.+2      	; 0x19fa <LCD_WriteCommand+0x192>
    19f8:	43 c0       	rjmp	.+134    	; 0x1a80 <LCD_WriteCommand+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	fe 01       	movw	r30, r28
    19fc:	e6 5b       	subi	r30, 0xB6	; 182
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e2       	ldi	r20, 0x20	; 32
    1a0e:	51 e4       	ldi	r21, 0x41	; 65
    1a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	8e 01       	movw	r16, r28
    1a1a:	0c 5b       	subi	r16, 0xBC	; 188
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
    1a30:	1f c0       	rjmp	.+62     	; 0x1a70 <LCD_WriteCommand+0x208>
    1a32:	fe 01       	movw	r30, r28
    1a34:	ee 5b       	subi	r30, 0xBE	; 190
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 e9       	ldi	r24, 0x90	; 144
    1a3a:	91 e0       	ldi	r25, 0x01	; 1
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
    1a40:	fe 01       	movw	r30, r28
    1a42:	ee 5b       	subi	r30, 0xBE	; 190
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_WriteCommand+0x1e2>
    1a4e:	fe 01       	movw	r30, r28
    1a50:	ee 5b       	subi	r30, 0xBE	; 190
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	de 01       	movw	r26, r28
    1a5a:	ac 5b       	subi	r26, 0xBC	; 188
    1a5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ec 5b       	subi	r30, 0xBC	; 188
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 81       	ld	r24, Z
    1a66:	91 81       	ldd	r25, Z+1	; 0x01
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	11 96       	adiw	r26, 0x01	; 1
    1a6c:	9c 93       	st	X, r25
    1a6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	fe 01       	movw	r30, r28
    1a72:	ec 5b       	subi	r30, 0xBC	; 188
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	d1 f6       	brne	.-76     	; 0x1a32 <LCD_WriteCommand+0x1ca>
    1a7e:	42 c0       	rjmp	.+132    	; 0x1b04 <LCD_WriteCommand+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a80:	8e 01       	movw	r16, r28
    1a82:	0c 5b       	subi	r16, 0xBC	; 188
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	fe 01       	movw	r30, r28
    1a88:	ea 5b       	subi	r30, 0xBA	; 186
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	60 81       	ld	r22, Z
    1a8e:	71 81       	ldd	r23, Z+1	; 0x01
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	93 81       	ldd	r25, Z+3	; 0x03
    1a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	80 83       	st	Z, r24
    1aa2:	de 01       	movw	r26, r28
    1aa4:	a0 5c       	subi	r26, 0xC0	; 192
    1aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ec 5b       	subi	r30, 0xBC	; 188
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	11 96       	adiw	r26, 0x01	; 1
    1ab4:	9c 93       	st	X, r25
    1ab6:	8e 93       	st	-X, r24
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e0 5c       	subi	r30, 0xC0	; 192
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	80 81       	ld	r24, Z
    1ac0:	91 81       	ldd	r25, Z+1	; 0x01
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_WriteCommand+0x25a>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e0 5c       	subi	r30, 0xC0	; 192
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	80 83       	st	Z, r24
    1ad0:	19 c0       	rjmp	.+50     	; 0x1b04 <LCD_WriteCommand+0x29c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	02 5b       	subi	r16, 0xB2	; 178
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e1 5b       	subi	r30, 0xB1	; 177
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	f8 01       	movw	r30, r16
    1af0:	80 83       	st	Z, r24
    1af2:	fe 01       	movw	r30, r28
    1af4:	e2 5b       	subi	r30, 0xB2	; 178
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1afc:	8f ad       	ldd	r24, Y+63	; 0x3f
    1afe:	8a 95       	dec	r24
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_WriteCommand+0x296>
    1b02:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	Dio_SetPinValue(GroupB, PIN3, LOW);	//set enable pin low
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	63 e0       	ldi	r22, 0x03	; 3
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a8 e4       	ldi	r26, 0x48	; 72
    1b14:	b3 e4       	ldi	r27, 0x43	; 67
    1b16:	8b af       	std	Y+59, r24	; 0x3b
    1b18:	9c af       	std	Y+60, r25	; 0x3c
    1b1a:	ad af       	std	Y+61, r26	; 0x3d
    1b1c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b1e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b20:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b26:	2b ea       	ldi	r18, 0xAB	; 171
    1b28:	3a ea       	ldi	r19, 0xAA	; 170
    1b2a:	4a ea       	ldi	r20, 0xAA	; 170
    1b2c:	50 e4       	ldi	r21, 0x40	; 64
    1b2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8f ab       	std	Y+55, r24	; 0x37
    1b38:	98 af       	std	Y+56, r25	; 0x38
    1b3a:	a9 af       	std	Y+57, r26	; 0x39
    1b3c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b3e:	6f a9       	ldd	r22, Y+55	; 0x37
    1b40:	78 ad       	ldd	r23, Y+56	; 0x38
    1b42:	89 ad       	ldd	r24, Y+57	; 0x39
    1b44:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	1c f4       	brge	.+6      	; 0x1b5c <LCD_WriteCommand+0x2f4>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	8e ab       	std	Y+54, r24	; 0x36
    1b5a:	91 c0       	rjmp	.+290    	; 0x1c7e <LCD_WriteCommand+0x416>
	else if (__tmp > 255)
    1b5c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b5e:	78 ad       	ldd	r23, Y+56	; 0x38
    1b60:	89 ad       	ldd	r24, Y+57	; 0x39
    1b62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	53 e4       	ldi	r21, 0x43	; 67
    1b6c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	0c f0       	brlt	.+2      	; 0x1b76 <LCD_WriteCommand+0x30e>
    1b74:	7b c0       	rjmp	.+246    	; 0x1c6c <LCD_WriteCommand+0x404>
	{
		_delay_ms(__us / 1000.0);
    1b76:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b78:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a e7       	ldi	r20, 0x7A	; 122
    1b84:	54 e4       	ldi	r21, 0x44	; 68
    1b86:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8a ab       	std	Y+50, r24	; 0x32
    1b90:	9b ab       	std	Y+51, r25	; 0x33
    1b92:	ac ab       	std	Y+52, r26	; 0x34
    1b94:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	6a a9       	ldd	r22, Y+50	; 0x32
    1b98:	7b a9       	ldd	r23, Y+51	; 0x33
    1b9a:	8c a9       	ldd	r24, Y+52	; 0x34
    1b9c:	9d a9       	ldd	r25, Y+53	; 0x35
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a e7       	ldi	r20, 0x7A	; 122
    1ba4:	55 e4       	ldi	r21, 0x45	; 69
    1ba6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8e a7       	std	Y+46, r24	; 0x2e
    1bb0:	9f a7       	std	Y+47, r25	; 0x2f
    1bb2:	a8 ab       	std	Y+48, r26	; 0x30
    1bb4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1bb6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bb8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bba:	88 a9       	ldd	r24, Y+48	; 0x30
    1bbc:	99 a9       	ldd	r25, Y+49	; 0x31
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <LCD_WriteCommand+0x370>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9d a7       	std	Y+45, r25	; 0x2d
    1bd4:	8c a7       	std	Y+44, r24	; 0x2c
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <LCD_WriteCommand+0x3ee>
	else if (__tmp > 65535)
    1bd8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bda:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bdc:	88 a9       	ldd	r24, Y+48	; 0x30
    1bde:	99 a9       	ldd	r25, Y+49	; 0x31
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <LCD_WriteCommand+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	6a a9       	ldd	r22, Y+50	; 0x32
    1bf2:	7b a9       	ldd	r23, Y+51	; 0x33
    1bf4:	8c a9       	ldd	r24, Y+52	; 0x34
    1bf6:	9d a9       	ldd	r25, Y+53	; 0x35
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9d a7       	std	Y+45, r25	; 0x2d
    1c16:	8c a7       	std	Y+44, r24	; 0x2c
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <LCD_WriteCommand+0x3d0>
    1c1a:	80 e9       	ldi	r24, 0x90	; 144
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	9b a7       	std	Y+43, r25	; 0x2b
    1c20:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c22:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c24:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_WriteCommand+0x3be>
    1c2a:	9b a7       	std	Y+43, r25	; 0x2b
    1c2c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c30:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9d a7       	std	Y+45, r25	; 0x2d
    1c36:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c3a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <LCD_WriteCommand+0x3b2>
    1c40:	24 c0       	rjmp	.+72     	; 0x1c8a <LCD_WriteCommand+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c44:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c46:	88 a9       	ldd	r24, Y+48	; 0x30
    1c48:	99 a9       	ldd	r25, Y+49	; 0x31
    1c4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9d a7       	std	Y+45, r25	; 0x2d
    1c54:	8c a7       	std	Y+44, r24	; 0x2c
    1c56:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c58:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c5a:	99 a7       	std	Y+41, r25	; 0x29
    1c5c:	88 a7       	std	Y+40, r24	; 0x28
    1c5e:	88 a5       	ldd	r24, Y+40	; 0x28
    1c60:	99 a5       	ldd	r25, Y+41	; 0x29
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_WriteCommand+0x3fa>
    1c66:	99 a7       	std	Y+41, r25	; 0x29
    1c68:	88 a7       	std	Y+40, r24	; 0x28
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <LCD_WriteCommand+0x422>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c6c:	6f a9       	ldd	r22, Y+55	; 0x37
    1c6e:	78 ad       	ldd	r23, Y+56	; 0x38
    1c70:	89 ad       	ldd	r24, Y+57	; 0x39
    1c72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8e ab       	std	Y+54, r24	; 0x36
    1c7e:	8e a9       	ldd	r24, Y+54	; 0x36
    1c80:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c82:	8f a1       	ldd	r24, Y+39	; 0x27
    1c84:	8a 95       	dec	r24
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_WriteCommand+0x41c>
    1c88:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (Command << 4);//Sending lower nibble
    1c8a:	ab e3       	ldi	r26, 0x3B	; 59
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	eb e3       	ldi	r30, 0x3B	; 59
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	28 2f       	mov	r18, r24
    1c96:	2f 70       	andi	r18, 0x0F	; 15
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e9 5a       	subi	r30, 0xA9	; 169
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 81       	ld	r24, Z
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	82 95       	swap	r24
    1ca6:	92 95       	swap	r25
    1ca8:	90 7f       	andi	r25, 0xF0	; 240
    1caa:	98 27       	eor	r25, r24
    1cac:	80 7f       	andi	r24, 0xF0	; 240
    1cae:	98 27       	eor	r25, r24
    1cb0:	82 2b       	or	r24, r18
    1cb2:	8c 93       	st	X, r24
	Dio_SetPinValue(GroupB, PIN3, HIGH);//set enable pin high
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	63 e0       	ldi	r22, 0x03	; 3
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e8       	ldi	r26, 0x80	; 128
    1cc4:	bf e3       	ldi	r27, 0x3F	; 63
    1cc6:	8b a3       	std	Y+35, r24	; 0x23
    1cc8:	9c a3       	std	Y+36, r25	; 0x24
    1cca:	ad a3       	std	Y+37, r26	; 0x25
    1ccc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cce:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd6:	2b ea       	ldi	r18, 0xAB	; 171
    1cd8:	3a ea       	ldi	r19, 0xAA	; 170
    1cda:	4a ea       	ldi	r20, 0xAA	; 170
    1cdc:	50 e4       	ldi	r21, 0x40	; 64
    1cde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ce8:	98 a3       	std	Y+32, r25	; 0x20
    1cea:	a9 a3       	std	Y+33, r26	; 0x21
    1cec:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1cee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cf0:	78 a1       	ldd	r23, Y+32	; 0x20
    1cf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	1c f4       	brge	.+6      	; 0x1d0c <LCD_WriteCommand+0x4a4>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	8e 8f       	std	Y+30, r24	; 0x1e
    1d0a:	91 c0       	rjmp	.+290    	; 0x1e2e <LCD_WriteCommand+0x5c6>
	else if (__tmp > 255)
    1d0c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d0e:	78 a1       	ldd	r23, Y+32	; 0x20
    1d10:	89 a1       	ldd	r24, Y+33	; 0x21
    1d12:	9a a1       	ldd	r25, Y+34	; 0x22
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	53 e4       	ldi	r21, 0x43	; 67
    1d1c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	0c f0       	brlt	.+2      	; 0x1d26 <LCD_WriteCommand+0x4be>
    1d24:	7b c0       	rjmp	.+246    	; 0x1e1c <LCD_WriteCommand+0x5b4>
	{
		_delay_ms(__us / 1000.0);
    1d26:	6b a1       	ldd	r22, Y+35	; 0x23
    1d28:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8a 8f       	std	Y+26, r24	; 0x1a
    1d40:	9b 8f       	std	Y+27, r25	; 0x1b
    1d42:	ac 8f       	std	Y+28, r26	; 0x1c
    1d44:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d46:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d48:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d4c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a e7       	ldi	r20, 0x7A	; 122
    1d54:	55 e4       	ldi	r21, 0x45	; 69
    1d56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8e 8b       	std	Y+22, r24	; 0x16
    1d60:	9f 8b       	std	Y+23, r25	; 0x17
    1d62:	a8 8f       	std	Y+24, r26	; 0x18
    1d64:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d66:	6e 89       	ldd	r22, Y+22	; 0x16
    1d68:	7f 89       	ldd	r23, Y+23	; 0x17
    1d6a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d6c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <LCD_WriteCommand+0x520>
		__ticks = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9d 8b       	std	Y+21, r25	; 0x15
    1d84:	8c 8b       	std	Y+20, r24	; 0x14
    1d86:	3f c0       	rjmp	.+126    	; 0x1e06 <LCD_WriteCommand+0x59e>
	else if (__tmp > 65535)
    1d88:	6e 89       	ldd	r22, Y+22	; 0x16
    1d8a:	7f 89       	ldd	r23, Y+23	; 0x17
    1d8c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d8e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	4c f5       	brge	.+82     	; 0x1df2 <LCD_WriteCommand+0x58a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1da2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1da4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1da6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9d 8b       	std	Y+21, r25	; 0x15
    1dc6:	8c 8b       	std	Y+20, r24	; 0x14
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <LCD_WriteCommand+0x580>
    1dca:	80 e9       	ldi	r24, 0x90	; 144
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	9b 8b       	std	Y+19, r25	; 0x13
    1dd0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dd2:	8a 89       	ldd	r24, Y+18	; 0x12
    1dd4:	9b 89       	ldd	r25, Y+19	; 0x13
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_WriteCommand+0x56e>
    1dda:	9b 8b       	std	Y+19, r25	; 0x13
    1ddc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	8c 89       	ldd	r24, Y+20	; 0x14
    1de0:	9d 89       	ldd	r25, Y+21	; 0x15
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	9d 8b       	std	Y+21, r25	; 0x15
    1de6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de8:	8c 89       	ldd	r24, Y+20	; 0x14
    1dea:	9d 89       	ldd	r25, Y+21	; 0x15
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f7       	brne	.-38     	; 0x1dca <LCD_WriteCommand+0x562>
    1df0:	24 c0       	rjmp	.+72     	; 0x1e3a <LCD_WriteCommand+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	6e 89       	ldd	r22, Y+22	; 0x16
    1df4:	7f 89       	ldd	r23, Y+23	; 0x17
    1df6:	88 8d       	ldd	r24, Y+24	; 0x18
    1df8:	99 8d       	ldd	r25, Y+25	; 0x19
    1dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9d 8b       	std	Y+21, r25	; 0x15
    1e04:	8c 8b       	std	Y+20, r24	; 0x14
    1e06:	8c 89       	ldd	r24, Y+20	; 0x14
    1e08:	9d 89       	ldd	r25, Y+21	; 0x15
    1e0a:	99 8b       	std	Y+17, r25	; 0x11
    1e0c:	88 8b       	std	Y+16, r24	; 0x10
    1e0e:	88 89       	ldd	r24, Y+16	; 0x10
    1e10:	99 89       	ldd	r25, Y+17	; 0x11
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_WriteCommand+0x5aa>
    1e16:	99 8b       	std	Y+17, r25	; 0x11
    1e18:	88 8b       	std	Y+16, r24	; 0x10
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <LCD_WriteCommand+0x5d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e1c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e1e:	78 a1       	ldd	r23, Y+32	; 0x20
    1e20:	89 a1       	ldd	r24, Y+33	; 0x21
    1e22:	9a a1       	ldd	r25, Y+34	; 0x22
    1e24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e30:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e34:	8a 95       	dec	r24
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_WriteCommand+0x5cc>
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_SetPinValue(GroupB, PIN3, LOW);//set enable pin low
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	63 e0       	ldi	r22, 0x03	; 3
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a0 e0       	ldi	r26, 0x00	; 0
    1e4a:	b0 e4       	ldi	r27, 0x40	; 64
    1e4c:	8b 87       	std	Y+11, r24	; 0x0b
    1e4e:	9c 87       	std	Y+12, r25	; 0x0c
    1e50:	ad 87       	std	Y+13, r26	; 0x0d
    1e52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a e7       	ldi	r20, 0x7A	; 122
    1e62:	55 e4       	ldi	r21, 0x45	; 69
    1e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	8f 83       	std	Y+7, r24	; 0x07
    1e6e:	98 87       	std	Y+8, r25	; 0x08
    1e70:	a9 87       	std	Y+9, r26	; 0x09
    1e72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e74:	6f 81       	ldd	r22, Y+7	; 0x07
    1e76:	78 85       	ldd	r23, Y+8	; 0x08
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e8       	ldi	r20, 0x80	; 128
    1e82:	5f e3       	ldi	r21, 0x3F	; 63
    1e84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e88:	88 23       	and	r24, r24
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <LCD_WriteCommand+0x62e>
		__ticks = 1;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	3f c0       	rjmp	.+126    	; 0x1f14 <LCD_WriteCommand+0x6ac>
	else if (__tmp > 65535)
    1e96:	6f 81       	ldd	r22, Y+7	; 0x07
    1e98:	78 85       	ldd	r23, Y+8	; 0x08
    1e9a:	89 85       	ldd	r24, Y+9	; 0x09
    1e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	3f ef       	ldi	r19, 0xFF	; 255
    1ea2:	4f e7       	ldi	r20, 0x7F	; 127
    1ea4:	57 e4       	ldi	r21, 0x47	; 71
    1ea6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eaa:	18 16       	cp	r1, r24
    1eac:	4c f5       	brge	.+82     	; 0x1f00 <LCD_WriteCommand+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e2       	ldi	r20, 0x20	; 32
    1ebc:	51 e4       	ldi	r21, 0x41	; 65
    1ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <LCD_WriteCommand+0x68e>
    1ed8:	80 e9       	ldi	r24, 0x90	; 144
    1eda:	91 e0       	ldi	r25, 0x01	; 1
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <LCD_WriteCommand+0x67c>
    1ee8:	9c 83       	std	Y+4, r25	; 0x04
    1eea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	69 f7       	brne	.-38     	; 0x1ed8 <LCD_WriteCommand+0x670>
    1efe:	14 c0       	rjmp	.+40     	; 0x1f28 <LCD_WriteCommand+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f00:	6f 81       	ldd	r22, Y+7	; 0x07
    1f02:	78 85       	ldd	r23, Y+8	; 0x08
    1f04:	89 85       	ldd	r24, Y+9	; 0x09
    1f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9e 83       	std	Y+6, r25	; 0x06
    1f12:	8d 83       	std	Y+5, r24	; 0x05
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_WriteCommand+0x6b8>
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    1f28:	c9 5a       	subi	r28, 0xA9	; 169
    1f2a:	df 4f       	sbci	r29, 0xFF	; 255
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	08 95       	ret

00001f40 <LCD_WriteData>:

void LCD_WriteData(u8 Data)
{
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	c7 55       	subi	r28, 0x57	; 87
    1f4e:	d0 40       	sbci	r29, 0x00	; 0
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e9 5a       	subi	r30, 0xA9	; 169
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 83       	st	Z, r24
	//set enable pin low
	Dio_SetPinValue(GroupC, PIN2, LOW);
	_delay_ms(20);
#endif
#ifdef FourBitLCD
	LCD_Port = (LCD_Port & 0x0F) | (Data & 0xF0); //Sending upper nibble
    1f62:	ab e3       	ldi	r26, 0x3B	; 59
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	eb e3       	ldi	r30, 0x3B	; 59
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	98 2f       	mov	r25, r24
    1f6e:	9f 70       	andi	r25, 0x0F	; 15
    1f70:	fe 01       	movw	r30, r28
    1f72:	e9 5a       	subi	r30, 0xA9	; 169
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	80 7f       	andi	r24, 0xF0	; 240
    1f7a:	89 2b       	or	r24, r25
    1f7c:	8c 93       	st	X, r24
	Dio_SetPinValue(GroupB, PIN1, HIGH);	//RS high
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	61 e0       	ldi	r22, 0x01	; 1
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
	Dio_SetPinValue(GroupB, PIN2, LOW);	//RW low
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	62 e0       	ldi	r22, 0x02	; 2
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
	Dio_SetPinValue(GroupB, PIN3, HIGH);//set enable pin high
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	63 e0       	ldi	r22, 0x03	; 3
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ed 5a       	subi	r30, 0xAD	; 173
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e8       	ldi	r26, 0x80	; 128
    1fa8:	bf e3       	ldi	r27, 0x3F	; 63
    1faa:	80 83       	st	Z, r24
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	a2 83       	std	Z+2, r26	; 0x02
    1fb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb2:	8e 01       	movw	r16, r28
    1fb4:	01 5b       	subi	r16, 0xB1	; 177
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ed 5a       	subi	r30, 0xAD	; 173
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	60 81       	ld	r22, Z
    1fc0:	71 81       	ldd	r23, Z+1	; 0x01
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	2b ea       	ldi	r18, 0xAB	; 171
    1fc8:	3a ea       	ldi	r19, 0xAA	; 170
    1fca:	4a ea       	ldi	r20, 0xAA	; 170
    1fcc:	50 e4       	ldi	r21, 0x40	; 64
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	80 83       	st	Z, r24
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	a2 83       	std	Z+2, r26	; 0x02
    1fde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e1 5b       	subi	r30, 0xB1	; 177
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	34 f4       	brge	.+12     	; 0x200a <LCD_WriteData+0xca>
		__ticks = 1;
    1ffe:	fe 01       	movw	r30, r28
    2000:	e2 5b       	subi	r30, 0xB2	; 178
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	80 83       	st	Z, r24
    2008:	e0 c0       	rjmp	.+448    	; 0x21ca <LCD_WriteData+0x28a>
	else if (__tmp > 255)
    200a:	fe 01       	movw	r30, r28
    200c:	e1 5b       	subi	r30, 0xB1	; 177
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	53 e4       	ldi	r21, 0x43	; 67
    2020:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2024:	18 16       	cp	r1, r24
    2026:	0c f0       	brlt	.+2      	; 0x202a <LCD_WriteData+0xea>
    2028:	c0 c0       	rjmp	.+384    	; 0x21aa <LCD_WriteData+0x26a>
	{
		_delay_ms(__us / 1000.0);
    202a:	fe 01       	movw	r30, r28
    202c:	ed 5a       	subi	r30, 0xAD	; 173
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a e7       	ldi	r20, 0x7A	; 122
    203e:	54 e4       	ldi	r21, 0x44	; 68
    2040:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	fe 01       	movw	r30, r28
    204a:	e6 5b       	subi	r30, 0xB6	; 182
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 83       	st	Z, r24
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	a2 83       	std	Z+2, r26	; 0x02
    2054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	8e 01       	movw	r16, r28
    2058:	0a 5b       	subi	r16, 0xBA	; 186
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	fe 01       	movw	r30, r28
    205e:	e6 5b       	subi	r30, 0xB6	; 182
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a e7       	ldi	r20, 0x7A	; 122
    2070:	55 e4       	ldi	r21, 0x45	; 69
    2072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	f8 01       	movw	r30, r16
    207c:	80 83       	st	Z, r24
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	a2 83       	std	Z+2, r26	; 0x02
    2082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2084:	fe 01       	movw	r30, r28
    2086:	ea 5b       	subi	r30, 0xBA	; 186
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	44 f4       	brge	.+16     	; 0x20b2 <LCD_WriteData+0x172>
		__ticks = 1;
    20a2:	fe 01       	movw	r30, r28
    20a4:	ec 5b       	subi	r30, 0xBC	; 188
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	80 83       	st	Z, r24
    20b0:	64 c0       	rjmp	.+200    	; 0x217a <LCD_WriteData+0x23a>
	else if (__tmp > 65535)
    20b2:	fe 01       	movw	r30, r28
    20b4:	ea 5b       	subi	r30, 0xBA	; 186
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	0c f0       	brlt	.+2      	; 0x20d2 <LCD_WriteData+0x192>
    20d0:	43 c0       	rjmp	.+134    	; 0x2158 <LCD_WriteData+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	fe 01       	movw	r30, r28
    20d4:	e6 5b       	subi	r30, 0xB6	; 182
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	8e 01       	movw	r16, r28
    20f2:	0c 5b       	subi	r16, 0xBC	; 188
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	f8 01       	movw	r30, r16
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	1f c0       	rjmp	.+62     	; 0x2148 <LCD_WriteData+0x208>
    210a:	fe 01       	movw	r30, r28
    210c:	ee 5b       	subi	r30, 0xBE	; 190
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 e9       	ldi	r24, 0x90	; 144
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
    2118:	fe 01       	movw	r30, r28
    211a:	ee 5b       	subi	r30, 0xBE	; 190
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_WriteData+0x1e2>
    2126:	fe 01       	movw	r30, r28
    2128:	ee 5b       	subi	r30, 0xBE	; 190
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	de 01       	movw	r26, r28
    2132:	ac 5b       	subi	r26, 0xBC	; 188
    2134:	bf 4f       	sbci	r27, 0xFF	; 255
    2136:	fe 01       	movw	r30, r28
    2138:	ec 5b       	subi	r30, 0xBC	; 188
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 81       	ld	r24, Z
    213e:	91 81       	ldd	r25, Z+1	; 0x01
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	11 96       	adiw	r26, 0x01	; 1
    2144:	9c 93       	st	X, r25
    2146:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	fe 01       	movw	r30, r28
    214a:	ec 5b       	subi	r30, 0xBC	; 188
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	d1 f6       	brne	.-76     	; 0x210a <LCD_WriteData+0x1ca>
    2156:	42 c0       	rjmp	.+132    	; 0x21dc <LCD_WriteData+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	8e 01       	movw	r16, r28
    215a:	0c 5b       	subi	r16, 0xBC	; 188
    215c:	1f 4f       	sbci	r17, 0xFF	; 255
    215e:	fe 01       	movw	r30, r28
    2160:	ea 5b       	subi	r30, 0xBA	; 186
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	60 81       	ld	r22, Z
    2166:	71 81       	ldd	r23, Z+1	; 0x01
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	f8 01       	movw	r30, r16
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	de 01       	movw	r26, r28
    217c:	a0 5c       	subi	r26, 0xC0	; 192
    217e:	bf 4f       	sbci	r27, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	ec 5b       	subi	r30, 0xBC	; 188
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	9c 93       	st	X, r25
    218e:	8e 93       	st	-X, r24
    2190:	fe 01       	movw	r30, r28
    2192:	e0 5c       	subi	r30, 0xC0	; 192
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_WriteData+0x25a>
    219e:	fe 01       	movw	r30, r28
    21a0:	e0 5c       	subi	r30, 0xC0	; 192
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	19 c0       	rjmp	.+50     	; 0x21dc <LCD_WriteData+0x29c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21aa:	8e 01       	movw	r16, r28
    21ac:	02 5b       	subi	r16, 0xB2	; 178
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	fe 01       	movw	r30, r28
    21b2:	e1 5b       	subi	r30, 0xB1	; 177
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	60 81       	ld	r22, Z
    21b8:	71 81       	ldd	r23, Z+1	; 0x01
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	f8 01       	movw	r30, r16
    21c8:	80 83       	st	Z, r24
    21ca:	fe 01       	movw	r30, r28
    21cc:	e2 5b       	subi	r30, 0xB2	; 178
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    21d6:	8a 95       	dec	r24
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_WriteData+0x296>
    21da:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	Dio_SetPinValue(GroupB, PIN3, LOW);	//set enable pin low
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	63 e0       	ldi	r22, 0x03	; 3
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a8 e4       	ldi	r26, 0x48	; 72
    21ec:	b3 e4       	ldi	r27, 0x43	; 67
    21ee:	8b af       	std	Y+59, r24	; 0x3b
    21f0:	9c af       	std	Y+60, r25	; 0x3c
    21f2:	ad af       	std	Y+61, r26	; 0x3d
    21f4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21f6:	6b ad       	ldd	r22, Y+59	; 0x3b
    21f8:	7c ad       	ldd	r23, Y+60	; 0x3c
    21fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    21fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    21fe:	2b ea       	ldi	r18, 0xAB	; 171
    2200:	3a ea       	ldi	r19, 0xAA	; 170
    2202:	4a ea       	ldi	r20, 0xAA	; 170
    2204:	50 e4       	ldi	r21, 0x40	; 64
    2206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8f ab       	std	Y+55, r24	; 0x37
    2210:	98 af       	std	Y+56, r25	; 0x38
    2212:	a9 af       	std	Y+57, r26	; 0x39
    2214:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2216:	6f a9       	ldd	r22, Y+55	; 0x37
    2218:	78 ad       	ldd	r23, Y+56	; 0x38
    221a:	89 ad       	ldd	r24, Y+57	; 0x39
    221c:	9a ad       	ldd	r25, Y+58	; 0x3a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	1c f4       	brge	.+6      	; 0x2234 <LCD_WriteData+0x2f4>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	8e ab       	std	Y+54, r24	; 0x36
    2232:	91 c0       	rjmp	.+290    	; 0x2356 <LCD_WriteData+0x416>
	else if (__tmp > 255)
    2234:	6f a9       	ldd	r22, Y+55	; 0x37
    2236:	78 ad       	ldd	r23, Y+56	; 0x38
    2238:	89 ad       	ldd	r24, Y+57	; 0x39
    223a:	9a ad       	ldd	r25, Y+58	; 0x3a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	53 e4       	ldi	r21, 0x43	; 67
    2244:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	0c f0       	brlt	.+2      	; 0x224e <LCD_WriteData+0x30e>
    224c:	7b c0       	rjmp	.+246    	; 0x2344 <LCD_WriteData+0x404>
	{
		_delay_ms(__us / 1000.0);
    224e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2250:	7c ad       	ldd	r23, Y+60	; 0x3c
    2252:	8d ad       	ldd	r24, Y+61	; 0x3d
    2254:	9e ad       	ldd	r25, Y+62	; 0x3e
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a e7       	ldi	r20, 0x7A	; 122
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8a ab       	std	Y+50, r24	; 0x32
    2268:	9b ab       	std	Y+51, r25	; 0x33
    226a:	ac ab       	std	Y+52, r26	; 0x34
    226c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6a a9       	ldd	r22, Y+50	; 0x32
    2270:	7b a9       	ldd	r23, Y+51	; 0x33
    2272:	8c a9       	ldd	r24, Y+52	; 0x34
    2274:	9d a9       	ldd	r25, Y+53	; 0x35
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a e7       	ldi	r20, 0x7A	; 122
    227c:	55 e4       	ldi	r21, 0x45	; 69
    227e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8e a7       	std	Y+46, r24	; 0x2e
    2288:	9f a7       	std	Y+47, r25	; 0x2f
    228a:	a8 ab       	std	Y+48, r26	; 0x30
    228c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    228e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2290:	7f a5       	ldd	r23, Y+47	; 0x2f
    2292:	88 a9       	ldd	r24, Y+48	; 0x30
    2294:	99 a9       	ldd	r25, Y+49	; 0x31
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_WriteData+0x370>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9d a7       	std	Y+45, r25	; 0x2d
    22ac:	8c a7       	std	Y+44, r24	; 0x2c
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_WriteData+0x3ee>
	else if (__tmp > 65535)
    22b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    22b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    22b4:	88 a9       	ldd	r24, Y+48	; 0x30
    22b6:	99 a9       	ldd	r25, Y+49	; 0x31
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_WriteData+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6a a9       	ldd	r22, Y+50	; 0x32
    22ca:	7b a9       	ldd	r23, Y+51	; 0x33
    22cc:	8c a9       	ldd	r24, Y+52	; 0x34
    22ce:	9d a9       	ldd	r25, Y+53	; 0x35
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9d a7       	std	Y+45, r25	; 0x2d
    22ee:	8c a7       	std	Y+44, r24	; 0x2c
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_WriteData+0x3d0>
    22f2:	80 e9       	ldi	r24, 0x90	; 144
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	9b a7       	std	Y+43, r25	; 0x2b
    22f8:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    22fc:	9b a5       	ldd	r25, Y+43	; 0x2b
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_WriteData+0x3be>
    2302:	9b a7       	std	Y+43, r25	; 0x2b
    2304:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8c a5       	ldd	r24, Y+44	; 0x2c
    2308:	9d a5       	ldd	r25, Y+45	; 0x2d
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9d a7       	std	Y+45, r25	; 0x2d
    230e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8c a5       	ldd	r24, Y+44	; 0x2c
    2312:	9d a5       	ldd	r25, Y+45	; 0x2d
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_WriteData+0x3b2>
    2318:	24 c0       	rjmp	.+72     	; 0x2362 <LCD_WriteData+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6e a5       	ldd	r22, Y+46	; 0x2e
    231c:	7f a5       	ldd	r23, Y+47	; 0x2f
    231e:	88 a9       	ldd	r24, Y+48	; 0x30
    2320:	99 a9       	ldd	r25, Y+49	; 0x31
    2322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9d a7       	std	Y+45, r25	; 0x2d
    232c:	8c a7       	std	Y+44, r24	; 0x2c
    232e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2330:	9d a5       	ldd	r25, Y+45	; 0x2d
    2332:	99 a7       	std	Y+41, r25	; 0x29
    2334:	88 a7       	std	Y+40, r24	; 0x28
    2336:	88 a5       	ldd	r24, Y+40	; 0x28
    2338:	99 a5       	ldd	r25, Y+41	; 0x29
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_WriteData+0x3fa>
    233e:	99 a7       	std	Y+41, r25	; 0x29
    2340:	88 a7       	std	Y+40, r24	; 0x28
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_WriteData+0x422>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2344:	6f a9       	ldd	r22, Y+55	; 0x37
    2346:	78 ad       	ldd	r23, Y+56	; 0x38
    2348:	89 ad       	ldd	r24, Y+57	; 0x39
    234a:	9a ad       	ldd	r25, Y+58	; 0x3a
    234c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8e ab       	std	Y+54, r24	; 0x36
    2356:	8e a9       	ldd	r24, Y+54	; 0x36
    2358:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    235a:	8f a1       	ldd	r24, Y+39	; 0x27
    235c:	8a 95       	dec	r24
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_WriteData+0x41c>
    2360:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (Data << 4);//Sending lower nibble
    2362:	ab e3       	ldi	r26, 0x3B	; 59
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	eb e3       	ldi	r30, 0x3B	; 59
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	28 2f       	mov	r18, r24
    236e:	2f 70       	andi	r18, 0x0F	; 15
    2370:	fe 01       	movw	r30, r28
    2372:	e9 5a       	subi	r30, 0xA9	; 169
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 81       	ld	r24, Z
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	82 95       	swap	r24
    237e:	92 95       	swap	r25
    2380:	90 7f       	andi	r25, 0xF0	; 240
    2382:	98 27       	eor	r25, r24
    2384:	80 7f       	andi	r24, 0xF0	; 240
    2386:	98 27       	eor	r25, r24
    2388:	82 2b       	or	r24, r18
    238a:	8c 93       	st	X, r24
	Dio_SetPinValue(GroupB, PIN3, HIGH);//set enable pin high
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	63 e0       	ldi	r22, 0x03	; 3
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	a0 e8       	ldi	r26, 0x80	; 128
    239c:	bf e3       	ldi	r27, 0x3F	; 63
    239e:	8b a3       	std	Y+35, r24	; 0x23
    23a0:	9c a3       	std	Y+36, r25	; 0x24
    23a2:	ad a3       	std	Y+37, r26	; 0x25
    23a4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23a6:	6b a1       	ldd	r22, Y+35	; 0x23
    23a8:	7c a1       	ldd	r23, Y+36	; 0x24
    23aa:	8d a1       	ldd	r24, Y+37	; 0x25
    23ac:	9e a1       	ldd	r25, Y+38	; 0x26
    23ae:	2b ea       	ldi	r18, 0xAB	; 171
    23b0:	3a ea       	ldi	r19, 0xAA	; 170
    23b2:	4a ea       	ldi	r20, 0xAA	; 170
    23b4:	50 e4       	ldi	r21, 0x40	; 64
    23b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8f 8f       	std	Y+31, r24	; 0x1f
    23c0:	98 a3       	std	Y+32, r25	; 0x20
    23c2:	a9 a3       	std	Y+33, r26	; 0x21
    23c4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    23c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23c8:	78 a1       	ldd	r23, Y+32	; 0x20
    23ca:	89 a1       	ldd	r24, Y+33	; 0x21
    23cc:	9a a1       	ldd	r25, Y+34	; 0x22
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	5f e3       	ldi	r21, 0x3F	; 63
    23d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23da:	88 23       	and	r24, r24
    23dc:	1c f4       	brge	.+6      	; 0x23e4 <LCD_WriteData+0x4a4>
		__ticks = 1;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	8e 8f       	std	Y+30, r24	; 0x1e
    23e2:	91 c0       	rjmp	.+290    	; 0x2506 <LCD_WriteData+0x5c6>
	else if (__tmp > 255)
    23e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23e6:	78 a1       	ldd	r23, Y+32	; 0x20
    23e8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ea:	9a a1       	ldd	r25, Y+34	; 0x22
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	53 e4       	ldi	r21, 0x43	; 67
    23f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	0c f0       	brlt	.+2      	; 0x23fe <LCD_WriteData+0x4be>
    23fc:	7b c0       	rjmp	.+246    	; 0x24f4 <LCD_WriteData+0x5b4>
	{
		_delay_ms(__us / 1000.0);
    23fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2400:	7c a1       	ldd	r23, Y+36	; 0x24
    2402:	8d a1       	ldd	r24, Y+37	; 0x25
    2404:	9e a1       	ldd	r25, Y+38	; 0x26
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	4a e7       	ldi	r20, 0x7A	; 122
    240c:	54 e4       	ldi	r21, 0x44	; 68
    240e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	8a 8f       	std	Y+26, r24	; 0x1a
    2418:	9b 8f       	std	Y+27, r25	; 0x1b
    241a:	ac 8f       	std	Y+28, r26	; 0x1c
    241c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2420:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2422:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2424:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a e7       	ldi	r20, 0x7A	; 122
    242c:	55 e4       	ldi	r21, 0x45	; 69
    242e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8e 8b       	std	Y+22, r24	; 0x16
    2438:	9f 8b       	std	Y+23, r25	; 0x17
    243a:	a8 8f       	std	Y+24, r26	; 0x18
    243c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    243e:	6e 89       	ldd	r22, Y+22	; 0x16
    2440:	7f 89       	ldd	r23, Y+23	; 0x17
    2442:	88 8d       	ldd	r24, Y+24	; 0x18
    2444:	99 8d       	ldd	r25, Y+25	; 0x19
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <LCD_WriteData+0x520>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9d 8b       	std	Y+21, r25	; 0x15
    245c:	8c 8b       	std	Y+20, r24	; 0x14
    245e:	3f c0       	rjmp	.+126    	; 0x24de <LCD_WriteData+0x59e>
	else if (__tmp > 65535)
    2460:	6e 89       	ldd	r22, Y+22	; 0x16
    2462:	7f 89       	ldd	r23, Y+23	; 0x17
    2464:	88 8d       	ldd	r24, Y+24	; 0x18
    2466:	99 8d       	ldd	r25, Y+25	; 0x19
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	4c f5       	brge	.+82     	; 0x24ca <LCD_WriteData+0x58a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2478:	6a 8d       	ldd	r22, Y+26	; 0x1a
    247a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    247c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    247e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e2       	ldi	r20, 0x20	; 32
    2486:	51 e4       	ldi	r21, 0x41	; 65
    2488:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9d 8b       	std	Y+21, r25	; 0x15
    249e:	8c 8b       	std	Y+20, r24	; 0x14
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <LCD_WriteData+0x580>
    24a2:	80 e9       	ldi	r24, 0x90	; 144
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	9b 8b       	std	Y+19, r25	; 0x13
    24a8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24aa:	8a 89       	ldd	r24, Y+18	; 0x12
    24ac:	9b 89       	ldd	r25, Y+19	; 0x13
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_WriteData+0x56e>
    24b2:	9b 8b       	std	Y+19, r25	; 0x13
    24b4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	8c 89       	ldd	r24, Y+20	; 0x14
    24b8:	9d 89       	ldd	r25, Y+21	; 0x15
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	9d 8b       	std	Y+21, r25	; 0x15
    24be:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c0:	8c 89       	ldd	r24, Y+20	; 0x14
    24c2:	9d 89       	ldd	r25, Y+21	; 0x15
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <LCD_WriteData+0x562>
    24c8:	24 c0       	rjmp	.+72     	; 0x2512 <LCD_WriteData+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	6e 89       	ldd	r22, Y+22	; 0x16
    24cc:	7f 89       	ldd	r23, Y+23	; 0x17
    24ce:	88 8d       	ldd	r24, Y+24	; 0x18
    24d0:	99 8d       	ldd	r25, Y+25	; 0x19
    24d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9d 8b       	std	Y+21, r25	; 0x15
    24dc:	8c 8b       	std	Y+20, r24	; 0x14
    24de:	8c 89       	ldd	r24, Y+20	; 0x14
    24e0:	9d 89       	ldd	r25, Y+21	; 0x15
    24e2:	99 8b       	std	Y+17, r25	; 0x11
    24e4:	88 8b       	std	Y+16, r24	; 0x10
    24e6:	88 89       	ldd	r24, Y+16	; 0x10
    24e8:	99 89       	ldd	r25, Y+17	; 0x11
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_WriteData+0x5aa>
    24ee:	99 8b       	std	Y+17, r25	; 0x11
    24f0:	88 8b       	std	Y+16, r24	; 0x10
    24f2:	0f c0       	rjmp	.+30     	; 0x2512 <LCD_WriteData+0x5d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24f6:	78 a1       	ldd	r23, Y+32	; 0x20
    24f8:	89 a1       	ldd	r24, Y+33	; 0x21
    24fa:	9a a1       	ldd	r25, Y+34	; 0x22
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8e 8f       	std	Y+30, r24	; 0x1e
    2506:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2508:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    250a:	8f 85       	ldd	r24, Y+15	; 0x0f
    250c:	8a 95       	dec	r24
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_WriteData+0x5cc>
    2510:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_SetPinValue(GroupB, PIN3, LOW);//set enable pin low
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	63 e0       	ldi	r22, 0x03	; 3
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Dio_SetPinValue>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e0       	ldi	r26, 0x00	; 0
    2522:	b0 e4       	ldi	r27, 0x40	; 64
    2524:	8b 87       	std	Y+11, r24	; 0x0b
    2526:	9c 87       	std	Y+12, r25	; 0x0c
    2528:	ad 87       	std	Y+13, r26	; 0x0d
    252a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	6b 85       	ldd	r22, Y+11	; 0x0b
    252e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2530:	8d 85       	ldd	r24, Y+13	; 0x0d
    2532:	9e 85       	ldd	r25, Y+14	; 0x0e
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a e7       	ldi	r20, 0x7A	; 122
    253a:	55 e4       	ldi	r21, 0x45	; 69
    253c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8f 83       	std	Y+7, r24	; 0x07
    2546:	98 87       	std	Y+8, r25	; 0x08
    2548:	a9 87       	std	Y+9, r26	; 0x09
    254a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <LCD_WriteData+0x62e>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	3f c0       	rjmp	.+126    	; 0x25ec <LCD_WriteData+0x6ac>
	else if (__tmp > 65535)
    256e:	6f 81       	ldd	r22, Y+7	; 0x07
    2570:	78 85       	ldd	r23, Y+8	; 0x08
    2572:	89 85       	ldd	r24, Y+9	; 0x09
    2574:	9a 85       	ldd	r25, Y+10	; 0x0a
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	3f ef       	ldi	r19, 0xFF	; 255
    257a:	4f e7       	ldi	r20, 0x7F	; 127
    257c:	57 e4       	ldi	r21, 0x47	; 71
    257e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2582:	18 16       	cp	r1, r24
    2584:	4c f5       	brge	.+82     	; 0x25d8 <LCD_WriteData+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	6b 85       	ldd	r22, Y+11	; 0x0b
    2588:	7c 85       	ldd	r23, Y+12	; 0x0c
    258a:	8d 85       	ldd	r24, Y+13	; 0x0d
    258c:	9e 85       	ldd	r25, Y+14	; 0x0e
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <LCD_WriteData+0x68e>
    25b0:	80 e9       	ldi	r24, 0x90	; 144
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_WriteData+0x67c>
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <LCD_WriteData+0x670>
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <LCD_WriteData+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	6f 81       	ldd	r22, Y+7	; 0x07
    25da:	78 85       	ldd	r23, Y+8	; 0x08
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	9a 81       	ldd	r25, Y+2	; 0x02
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_WriteData+0x6b8>
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2600:	c9 5a       	subi	r28, 0xA9	; 169
    2602:	df 4f       	sbci	r29, 0xFF	; 255
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	08 95       	ret

00002618 <LCD_Clear>:


void LCD_Clear(void)
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	2e 97       	sbiw	r28, 0x0e	; 14
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01);		/* Clear display */
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	a0 e0       	ldi	r26, 0x00	; 0
    2638:	b0 e4       	ldi	r27, 0x40	; 64
    263a:	8b 87       	std	Y+11, r24	; 0x0b
    263c:	9c 87       	std	Y+12, r25	; 0x0c
    263e:	ad 87       	std	Y+13, r26	; 0x0d
    2640:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2642:	6b 85       	ldd	r22, Y+11	; 0x0b
    2644:	7c 85       	ldd	r23, Y+12	; 0x0c
    2646:	8d 85       	ldd	r24, Y+13	; 0x0d
    2648:	9e 85       	ldd	r25, Y+14	; 0x0e
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	4a e7       	ldi	r20, 0x7A	; 122
    2650:	55 e4       	ldi	r21, 0x45	; 69
    2652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	8f 83       	std	Y+7, r24	; 0x07
    265c:	98 87       	std	Y+8, r25	; 0x08
    265e:	a9 87       	std	Y+9, r26	; 0x09
    2660:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2676:	88 23       	and	r24, r24
    2678:	2c f4       	brge	.+10     	; 0x2684 <LCD_Clear+0x6c>
		__ticks = 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	3f c0       	rjmp	.+126    	; 0x2702 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2684:	6f 81       	ldd	r22, Y+7	; 0x07
    2686:	78 85       	ldd	r23, Y+8	; 0x08
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	3f ef       	ldi	r19, 0xFF	; 255
    2690:	4f e7       	ldi	r20, 0x7F	; 127
    2692:	57 e4       	ldi	r21, 0x47	; 71
    2694:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2698:	18 16       	cp	r1, r24
    269a:	4c f5       	brge	.+82     	; 0x26ee <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269c:	6b 85       	ldd	r22, Y+11	; 0x0b
    269e:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e2       	ldi	r20, 0x20	; 32
    26aa:	51 e4       	ldi	r21, 0x41	; 65
    26ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	bc 01       	movw	r22, r24
    26b6:	cd 01       	movw	r24, r26
    26b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
    26c4:	0f c0       	rjmp	.+30     	; 0x26e4 <LCD_Clear+0xcc>
    26c6:	80 e9       	ldi	r24, 0x90	; 144
    26c8:	91 e0       	ldi	r25, 0x01	; 1
    26ca:	9c 83       	std	Y+4, r25	; 0x04
    26cc:	8b 83       	std	Y+3, r24	; 0x03
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <LCD_Clear+0xba>
    26d6:	9c 83       	std	Y+4, r25	; 0x04
    26d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	69 f7       	brne	.-38     	; 0x26c6 <LCD_Clear+0xae>
    26ec:	14 c0       	rjmp	.+40     	; 0x2716 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ee:	6f 81       	ldd	r22, Y+7	; 0x07
    26f0:	78 85       	ldd	r23, Y+8	; 0x08
    26f2:	89 85       	ldd	r24, Y+9	; 0x09
    26f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	9a 83       	std	Y+2, r25	; 0x02
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCD_Clear+0xf6>
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand(0x80);		/* Cursor at home position */
    2716:	80 e8       	ldi	r24, 0x80	; 128
    2718:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
}
    271c:	2e 96       	adiw	r28, 0x0e	; 14
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <LCD_WriteWord>:


void LCD_WriteWord(u8 *Word)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <LCD_WriteWord+0x6>
    2734:	0f 92       	push	r0
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	9b 83       	std	Y+3, r25	; 0x03
    273c:	8a 83       	std	Y+2, r24	; 0x02
	u8 index=0;
    273e:	19 82       	std	Y+1, r1	; 0x01
    2740:	0e c0       	rjmp	.+28     	; 0x275e <LCD_WriteWord+0x30>
	while(Word[index]!='\0')
	{
		LCD_WriteData(Word[index]);
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	fc 01       	movw	r30, r24
    274e:	e2 0f       	add	r30, r18
    2750:	f3 1f       	adc	r31, r19
    2752:	80 81       	ld	r24, Z
    2754:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_WriteData>
		index++;
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	89 83       	std	Y+1, r24	; 0x01


void LCD_WriteWord(u8 *Word)
{
	u8 index=0;
	while(Word[index]!='\0')
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	9b 81       	ldd	r25, Y+3	; 0x03
    2768:	fc 01       	movw	r30, r24
    276a:	e2 0f       	add	r30, r18
    276c:	f3 1f       	adc	r31, r19
    276e:	80 81       	ld	r24, Z
    2770:	88 23       	and	r24, r24
    2772:	39 f7       	brne	.-50     	; 0x2742 <LCD_WriteWord+0x14>
	{
		LCD_WriteData(Word[index]);
		index++;
	}
}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <LCD_WriteWord_xy>:

void LCD_WriteWord_xy (u8 row, u8 pos, u8 *str)	/* Send string to LCD with xy position */
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <LCD_WriteWord_xy+0x6>
    2786:	00 d0       	rcall	.+0      	; 0x2788 <LCD_WriteWord_xy+0x8>
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	6a 83       	std	Y+2, r22	; 0x02
    2790:	5c 83       	std	Y+4, r21	; 0x04
    2792:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	88 23       	and	r24, r24
    2798:	49 f4       	brne	.+18     	; 0x27ac <LCD_WriteWord_xy+0x2c>
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	80 31       	cpi	r24, 0x10	; 16
    279e:	30 f4       	brcc	.+12     	; 0x27ac <LCD_WriteWord_xy+0x2c>
		LCD_WriteCommand((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	8f 70       	andi	r24, 0x0F	; 15
    27a4:	80 68       	ori	r24, 0x80	; 128
    27a6:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
    27aa:	0b c0       	rjmp	.+22     	; 0x27c2 <LCD_WriteWord_xy+0x42>
	else if (row == 1 && pos<16)
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	81 30       	cpi	r24, 0x01	; 1
    27b0:	41 f4       	brne	.+16     	; 0x27c2 <LCD_WriteWord_xy+0x42>
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	80 31       	cpi	r24, 0x10	; 16
    27b6:	28 f4       	brcc	.+10     	; 0x27c2 <LCD_WriteWord_xy+0x42>
		LCD_WriteCommand((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	8f 70       	andi	r24, 0x0F	; 15
    27bc:	80 6c       	ori	r24, 0xC0	; 192
    27be:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
	LCD_WriteWord(str);		/* Call LCD string function */
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_WriteWord>
}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <LCD_SensorReading>:

void LCD_SensorReading (u32 SensRead)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	2e 97       	sbiw	r28, 0x0e	; 14
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	6b 87       	std	Y+11, r22	; 0x0b
    27ee:	7c 87       	std	Y+12, r23	; 0x0c
    27f0:	8d 87       	std	Y+13, r24	; 0x0d
    27f2:	9e 87       	std	Y+14, r25	; 0x0e
	u8 string [10];
    sprintf(string, "%d", SensRead);
    27f4:	8d b7       	in	r24, 0x3d	; 61
    27f6:	9e b7       	in	r25, 0x3e	; 62
    27f8:	08 97       	sbiw	r24, 0x08	; 8
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	9e bf       	out	0x3e, r25	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	8d bf       	out	0x3d, r24	; 61
    2804:	ed b7       	in	r30, 0x3d	; 61
    2806:	fe b7       	in	r31, 0x3e	; 62
    2808:	31 96       	adiw	r30, 0x01	; 1
    280a:	ce 01       	movw	r24, r28
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
    2812:	80 e6       	ldi	r24, 0x60	; 96
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	93 83       	std	Z+3, r25	; 0x03
    2818:	82 83       	std	Z+2, r24	; 0x02
    281a:	8b 85       	ldd	r24, Y+11	; 0x0b
    281c:	9c 85       	ldd	r25, Y+12	; 0x0c
    281e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2820:	be 85       	ldd	r27, Y+14	; 0x0e
    2822:	84 83       	std	Z+4, r24	; 0x04
    2824:	95 83       	std	Z+5, r25	; 0x05
    2826:	a6 83       	std	Z+6, r26	; 0x06
    2828:	b7 83       	std	Z+7, r27	; 0x07
    282a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <sprintf>
    282e:	8d b7       	in	r24, 0x3d	; 61
    2830:	9e b7       	in	r25, 0x3e	; 62
    2832:	08 96       	adiw	r24, 0x08	; 8
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	9e bf       	out	0x3e, r25	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	8d bf       	out	0x3d, r24	; 61
	LCD_WriteWord(string);
    283e:	ce 01       	movw	r24, r28
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_WriteWord>
}
    2846:	2e 96       	adiw	r28, 0x0e	; 14
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <main>:
#include "util/delay.h"
#include "LCD_Int.h"
#include "avr/io.h"

void main(void)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <main+0x6>
    285e:	00 d0       	rcall	.+0      	; 0x2860 <main+0x8>
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    2864:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <LCD_Init>
	u32 var = 154;
    2868:	8a e9       	ldi	r24, 0x9A	; 154
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	a0 e0       	ldi	r26, 0x00	; 0
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	9a 83       	std	Y+2, r25	; 0x02
    2874:	ab 83       	std	Y+3, r26	; 0x03
    2876:	bc 83       	std	Y+4, r27	; 0x04
	LCD_WriteCommand(0b10000000);
    2878:	80 e8       	ldi	r24, 0x80	; 128
    287a:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_WriteCommand>
	LCD_SensorReading(var);
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	ab 81       	ldd	r26, Y+3	; 0x03
    2884:	bc 81       	ldd	r27, Y+4	; 0x04
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_SensorReading>
    288e:	ff cf       	rjmp	.-2      	; 0x288e <main+0x36>

00002890 <__prologue_saves__>:
    2890:	2f 92       	push	r2
    2892:	3f 92       	push	r3
    2894:	4f 92       	push	r4
    2896:	5f 92       	push	r5
    2898:	6f 92       	push	r6
    289a:	7f 92       	push	r7
    289c:	8f 92       	push	r8
    289e:	9f 92       	push	r9
    28a0:	af 92       	push	r10
    28a2:	bf 92       	push	r11
    28a4:	cf 92       	push	r12
    28a6:	df 92       	push	r13
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	ca 1b       	sub	r28, r26
    28ba:	db 0b       	sbc	r29, r27
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	f8 94       	cli
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	cd bf       	out	0x3d, r28	; 61
    28c6:	09 94       	ijmp

000028c8 <__epilogue_restores__>:
    28c8:	2a 88       	ldd	r2, Y+18	; 0x12
    28ca:	39 88       	ldd	r3, Y+17	; 0x11
    28cc:	48 88       	ldd	r4, Y+16	; 0x10
    28ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    28d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28da:	b9 84       	ldd	r11, Y+9	; 0x09
    28dc:	c8 84       	ldd	r12, Y+8	; 0x08
    28de:	df 80       	ldd	r13, Y+7	; 0x07
    28e0:	ee 80       	ldd	r14, Y+6	; 0x06
    28e2:	fd 80       	ldd	r15, Y+5	; 0x05
    28e4:	0c 81       	ldd	r16, Y+4	; 0x04
    28e6:	1b 81       	ldd	r17, Y+3	; 0x03
    28e8:	aa 81       	ldd	r26, Y+2	; 0x02
    28ea:	b9 81       	ldd	r27, Y+1	; 0x01
    28ec:	ce 0f       	add	r28, r30
    28ee:	d1 1d       	adc	r29, r1
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	ed 01       	movw	r28, r26
    28fc:	08 95       	ret

000028fe <sprintf>:
    28fe:	ae e0       	ldi	r26, 0x0E	; 14
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e5 e8       	ldi	r30, 0x85	; 133
    2904:	f4 e1       	ldi	r31, 0x14	; 20
    2906:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__prologue_saves__+0x1c>
    290a:	0d 89       	ldd	r16, Y+21	; 0x15
    290c:	1e 89       	ldd	r17, Y+22	; 0x16
    290e:	86 e0       	ldi	r24, 0x06	; 6
    2910:	8c 83       	std	Y+4, r24	; 0x04
    2912:	1a 83       	std	Y+2, r17	; 0x02
    2914:	09 83       	std	Y+1, r16	; 0x01
    2916:	8f ef       	ldi	r24, 0xFF	; 255
    2918:	9f e7       	ldi	r25, 0x7F	; 127
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	9e 01       	movw	r18, r28
    2920:	27 5e       	subi	r18, 0xE7	; 231
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	ce 01       	movw	r24, r28
    2926:	01 96       	adiw	r24, 0x01	; 1
    2928:	6f 89       	ldd	r22, Y+23	; 0x17
    292a:	78 8d       	ldd	r23, Y+24	; 0x18
    292c:	a9 01       	movw	r20, r18
    292e:	0e 94 a3 14 	call	0x2946	; 0x2946 <vfprintf>
    2932:	2f 81       	ldd	r18, Y+7	; 0x07
    2934:	38 85       	ldd	r19, Y+8	; 0x08
    2936:	02 0f       	add	r16, r18
    2938:	13 1f       	adc	r17, r19
    293a:	f8 01       	movw	r30, r16
    293c:	10 82       	st	Z, r1
    293e:	2e 96       	adiw	r28, 0x0e	; 14
    2940:	e4 e0       	ldi	r30, 0x04	; 4
    2942:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__epilogue_restores__+0x1c>

00002946 <vfprintf>:
    2946:	ab e0       	ldi	r26, 0x0B	; 11
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e9 ea       	ldi	r30, 0xA9	; 169
    294c:	f4 e1       	ldi	r31, 0x14	; 20
    294e:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__>
    2952:	3c 01       	movw	r6, r24
    2954:	2b 01       	movw	r4, r22
    2956:	5a 01       	movw	r10, r20
    2958:	fc 01       	movw	r30, r24
    295a:	17 82       	std	Z+7, r1	; 0x07
    295c:	16 82       	std	Z+6, r1	; 0x06
    295e:	83 81       	ldd	r24, Z+3	; 0x03
    2960:	81 fd       	sbrc	r24, 1
    2962:	03 c0       	rjmp	.+6      	; 0x296a <vfprintf+0x24>
    2964:	6f ef       	ldi	r22, 0xFF	; 255
    2966:	7f ef       	ldi	r23, 0xFF	; 255
    2968:	c6 c1       	rjmp	.+908    	; 0x2cf6 <vfprintf+0x3b0>
    296a:	9a e0       	ldi	r25, 0x0A	; 10
    296c:	89 2e       	mov	r8, r25
    296e:	1e 01       	movw	r2, r28
    2970:	08 94       	sec
    2972:	21 1c       	adc	r2, r1
    2974:	31 1c       	adc	r3, r1
    2976:	f3 01       	movw	r30, r6
    2978:	23 81       	ldd	r18, Z+3	; 0x03
    297a:	f2 01       	movw	r30, r4
    297c:	23 fd       	sbrc	r18, 3
    297e:	85 91       	lpm	r24, Z+
    2980:	23 ff       	sbrs	r18, 3
    2982:	81 91       	ld	r24, Z+
    2984:	2f 01       	movw	r4, r30
    2986:	88 23       	and	r24, r24
    2988:	09 f4       	brne	.+2      	; 0x298c <vfprintf+0x46>
    298a:	b2 c1       	rjmp	.+868    	; 0x2cf0 <vfprintf+0x3aa>
    298c:	85 32       	cpi	r24, 0x25	; 37
    298e:	39 f4       	brne	.+14     	; 0x299e <vfprintf+0x58>
    2990:	23 fd       	sbrc	r18, 3
    2992:	85 91       	lpm	r24, Z+
    2994:	23 ff       	sbrs	r18, 3
    2996:	81 91       	ld	r24, Z+
    2998:	2f 01       	movw	r4, r30
    299a:	85 32       	cpi	r24, 0x25	; 37
    299c:	29 f4       	brne	.+10     	; 0x29a8 <vfprintf+0x62>
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	b3 01       	movw	r22, r6
    29a2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    29a6:	e7 cf       	rjmp	.-50     	; 0x2976 <vfprintf+0x30>
    29a8:	98 2f       	mov	r25, r24
    29aa:	ff 24       	eor	r15, r15
    29ac:	ee 24       	eor	r14, r14
    29ae:	99 24       	eor	r9, r9
    29b0:	ff e1       	ldi	r31, 0x1F	; 31
    29b2:	ff 15       	cp	r31, r15
    29b4:	d0 f0       	brcs	.+52     	; 0x29ea <vfprintf+0xa4>
    29b6:	9b 32       	cpi	r25, 0x2B	; 43
    29b8:	69 f0       	breq	.+26     	; 0x29d4 <vfprintf+0x8e>
    29ba:	9c 32       	cpi	r25, 0x2C	; 44
    29bc:	28 f4       	brcc	.+10     	; 0x29c8 <vfprintf+0x82>
    29be:	90 32       	cpi	r25, 0x20	; 32
    29c0:	59 f0       	breq	.+22     	; 0x29d8 <vfprintf+0x92>
    29c2:	93 32       	cpi	r25, 0x23	; 35
    29c4:	91 f4       	brne	.+36     	; 0x29ea <vfprintf+0xa4>
    29c6:	0e c0       	rjmp	.+28     	; 0x29e4 <vfprintf+0x9e>
    29c8:	9d 32       	cpi	r25, 0x2D	; 45
    29ca:	49 f0       	breq	.+18     	; 0x29de <vfprintf+0x98>
    29cc:	90 33       	cpi	r25, 0x30	; 48
    29ce:	69 f4       	brne	.+26     	; 0x29ea <vfprintf+0xa4>
    29d0:	41 e0       	ldi	r20, 0x01	; 1
    29d2:	24 c0       	rjmp	.+72     	; 0x2a1c <vfprintf+0xd6>
    29d4:	52 e0       	ldi	r21, 0x02	; 2
    29d6:	f5 2a       	or	r15, r21
    29d8:	84 e0       	ldi	r24, 0x04	; 4
    29da:	f8 2a       	or	r15, r24
    29dc:	28 c0       	rjmp	.+80     	; 0x2a2e <vfprintf+0xe8>
    29de:	98 e0       	ldi	r25, 0x08	; 8
    29e0:	f9 2a       	or	r15, r25
    29e2:	25 c0       	rjmp	.+74     	; 0x2a2e <vfprintf+0xe8>
    29e4:	e0 e1       	ldi	r30, 0x10	; 16
    29e6:	fe 2a       	or	r15, r30
    29e8:	22 c0       	rjmp	.+68     	; 0x2a2e <vfprintf+0xe8>
    29ea:	f7 fc       	sbrc	r15, 7
    29ec:	29 c0       	rjmp	.+82     	; 0x2a40 <vfprintf+0xfa>
    29ee:	89 2f       	mov	r24, r25
    29f0:	80 53       	subi	r24, 0x30	; 48
    29f2:	8a 30       	cpi	r24, 0x0A	; 10
    29f4:	70 f4       	brcc	.+28     	; 0x2a12 <vfprintf+0xcc>
    29f6:	f6 fe       	sbrs	r15, 6
    29f8:	05 c0       	rjmp	.+10     	; 0x2a04 <vfprintf+0xbe>
    29fa:	98 9c       	mul	r9, r8
    29fc:	90 2c       	mov	r9, r0
    29fe:	11 24       	eor	r1, r1
    2a00:	98 0e       	add	r9, r24
    2a02:	15 c0       	rjmp	.+42     	; 0x2a2e <vfprintf+0xe8>
    2a04:	e8 9c       	mul	r14, r8
    2a06:	e0 2c       	mov	r14, r0
    2a08:	11 24       	eor	r1, r1
    2a0a:	e8 0e       	add	r14, r24
    2a0c:	f0 e2       	ldi	r31, 0x20	; 32
    2a0e:	ff 2a       	or	r15, r31
    2a10:	0e c0       	rjmp	.+28     	; 0x2a2e <vfprintf+0xe8>
    2a12:	9e 32       	cpi	r25, 0x2E	; 46
    2a14:	29 f4       	brne	.+10     	; 0x2a20 <vfprintf+0xda>
    2a16:	f6 fc       	sbrc	r15, 6
    2a18:	6b c1       	rjmp	.+726    	; 0x2cf0 <vfprintf+0x3aa>
    2a1a:	40 e4       	ldi	r20, 0x40	; 64
    2a1c:	f4 2a       	or	r15, r20
    2a1e:	07 c0       	rjmp	.+14     	; 0x2a2e <vfprintf+0xe8>
    2a20:	9c 36       	cpi	r25, 0x6C	; 108
    2a22:	19 f4       	brne	.+6      	; 0x2a2a <vfprintf+0xe4>
    2a24:	50 e8       	ldi	r21, 0x80	; 128
    2a26:	f5 2a       	or	r15, r21
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <vfprintf+0xe8>
    2a2a:	98 36       	cpi	r25, 0x68	; 104
    2a2c:	49 f4       	brne	.+18     	; 0x2a40 <vfprintf+0xfa>
    2a2e:	f2 01       	movw	r30, r4
    2a30:	23 fd       	sbrc	r18, 3
    2a32:	95 91       	lpm	r25, Z+
    2a34:	23 ff       	sbrs	r18, 3
    2a36:	91 91       	ld	r25, Z+
    2a38:	2f 01       	movw	r4, r30
    2a3a:	99 23       	and	r25, r25
    2a3c:	09 f0       	breq	.+2      	; 0x2a40 <vfprintf+0xfa>
    2a3e:	b8 cf       	rjmp	.-144    	; 0x29b0 <vfprintf+0x6a>
    2a40:	89 2f       	mov	r24, r25
    2a42:	85 54       	subi	r24, 0x45	; 69
    2a44:	83 30       	cpi	r24, 0x03	; 3
    2a46:	18 f0       	brcs	.+6      	; 0x2a4e <vfprintf+0x108>
    2a48:	80 52       	subi	r24, 0x20	; 32
    2a4a:	83 30       	cpi	r24, 0x03	; 3
    2a4c:	38 f4       	brcc	.+14     	; 0x2a5c <vfprintf+0x116>
    2a4e:	44 e0       	ldi	r20, 0x04	; 4
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	a4 0e       	add	r10, r20
    2a54:	b5 1e       	adc	r11, r21
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	59 83       	std	Y+1, r21	; 0x01
    2a5a:	0f c0       	rjmp	.+30     	; 0x2a7a <vfprintf+0x134>
    2a5c:	93 36       	cpi	r25, 0x63	; 99
    2a5e:	31 f0       	breq	.+12     	; 0x2a6c <vfprintf+0x126>
    2a60:	93 37       	cpi	r25, 0x73	; 115
    2a62:	79 f0       	breq	.+30     	; 0x2a82 <vfprintf+0x13c>
    2a64:	93 35       	cpi	r25, 0x53	; 83
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <vfprintf+0x124>
    2a68:	56 c0       	rjmp	.+172    	; 0x2b16 <vfprintf+0x1d0>
    2a6a:	20 c0       	rjmp	.+64     	; 0x2aac <vfprintf+0x166>
    2a6c:	f5 01       	movw	r30, r10
    2a6e:	80 81       	ld	r24, Z
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	42 e0       	ldi	r20, 0x02	; 2
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	a4 0e       	add	r10, r20
    2a78:	b5 1e       	adc	r11, r21
    2a7a:	61 01       	movw	r12, r2
    2a7c:	01 e0       	ldi	r16, 0x01	; 1
    2a7e:	10 e0       	ldi	r17, 0x00	; 0
    2a80:	12 c0       	rjmp	.+36     	; 0x2aa6 <vfprintf+0x160>
    2a82:	f5 01       	movw	r30, r10
    2a84:	c0 80       	ld	r12, Z
    2a86:	d1 80       	ldd	r13, Z+1	; 0x01
    2a88:	f6 fc       	sbrc	r15, 6
    2a8a:	03 c0       	rjmp	.+6      	; 0x2a92 <vfprintf+0x14c>
    2a8c:	6f ef       	ldi	r22, 0xFF	; 255
    2a8e:	7f ef       	ldi	r23, 0xFF	; 255
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <vfprintf+0x150>
    2a92:	69 2d       	mov	r22, r9
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	42 e0       	ldi	r20, 0x02	; 2
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	a4 0e       	add	r10, r20
    2a9c:	b5 1e       	adc	r11, r21
    2a9e:	c6 01       	movw	r24, r12
    2aa0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <strnlen>
    2aa4:	8c 01       	movw	r16, r24
    2aa6:	5f e7       	ldi	r21, 0x7F	; 127
    2aa8:	f5 22       	and	r15, r21
    2aaa:	14 c0       	rjmp	.+40     	; 0x2ad4 <vfprintf+0x18e>
    2aac:	f5 01       	movw	r30, r10
    2aae:	c0 80       	ld	r12, Z
    2ab0:	d1 80       	ldd	r13, Z+1	; 0x01
    2ab2:	f6 fc       	sbrc	r15, 6
    2ab4:	03 c0       	rjmp	.+6      	; 0x2abc <vfprintf+0x176>
    2ab6:	6f ef       	ldi	r22, 0xFF	; 255
    2ab8:	7f ef       	ldi	r23, 0xFF	; 255
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <vfprintf+0x17a>
    2abc:	69 2d       	mov	r22, r9
    2abe:	70 e0       	ldi	r23, 0x00	; 0
    2ac0:	42 e0       	ldi	r20, 0x02	; 2
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	a4 0e       	add	r10, r20
    2ac6:	b5 1e       	adc	r11, r21
    2ac8:	c6 01       	movw	r24, r12
    2aca:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strnlen_P>
    2ace:	8c 01       	movw	r16, r24
    2ad0:	50 e8       	ldi	r21, 0x80	; 128
    2ad2:	f5 2a       	or	r15, r21
    2ad4:	f3 fe       	sbrs	r15, 3
    2ad6:	07 c0       	rjmp	.+14     	; 0x2ae6 <vfprintf+0x1a0>
    2ad8:	1a c0       	rjmp	.+52     	; 0x2b0e <vfprintf+0x1c8>
    2ada:	80 e2       	ldi	r24, 0x20	; 32
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	b3 01       	movw	r22, r6
    2ae0:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    2ae4:	ea 94       	dec	r14
    2ae6:	8e 2d       	mov	r24, r14
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	08 17       	cp	r16, r24
    2aec:	19 07       	cpc	r17, r25
    2aee:	a8 f3       	brcs	.-22     	; 0x2ada <vfprintf+0x194>
    2af0:	0e c0       	rjmp	.+28     	; 0x2b0e <vfprintf+0x1c8>
    2af2:	f6 01       	movw	r30, r12
    2af4:	f7 fc       	sbrc	r15, 7
    2af6:	85 91       	lpm	r24, Z+
    2af8:	f7 fe       	sbrs	r15, 7
    2afa:	81 91       	ld	r24, Z+
    2afc:	6f 01       	movw	r12, r30
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	b3 01       	movw	r22, r6
    2b02:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    2b06:	e1 10       	cpse	r14, r1
    2b08:	ea 94       	dec	r14
    2b0a:	01 50       	subi	r16, 0x01	; 1
    2b0c:	10 40       	sbci	r17, 0x00	; 0
    2b0e:	01 15       	cp	r16, r1
    2b10:	11 05       	cpc	r17, r1
    2b12:	79 f7       	brne	.-34     	; 0x2af2 <vfprintf+0x1ac>
    2b14:	ea c0       	rjmp	.+468    	; 0x2cea <vfprintf+0x3a4>
    2b16:	94 36       	cpi	r25, 0x64	; 100
    2b18:	11 f0       	breq	.+4      	; 0x2b1e <vfprintf+0x1d8>
    2b1a:	99 36       	cpi	r25, 0x69	; 105
    2b1c:	69 f5       	brne	.+90     	; 0x2b78 <vfprintf+0x232>
    2b1e:	f7 fe       	sbrs	r15, 7
    2b20:	08 c0       	rjmp	.+16     	; 0x2b32 <vfprintf+0x1ec>
    2b22:	f5 01       	movw	r30, r10
    2b24:	20 81       	ld	r18, Z
    2b26:	31 81       	ldd	r19, Z+1	; 0x01
    2b28:	42 81       	ldd	r20, Z+2	; 0x02
    2b2a:	53 81       	ldd	r21, Z+3	; 0x03
    2b2c:	84 e0       	ldi	r24, 0x04	; 4
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0a c0       	rjmp	.+20     	; 0x2b46 <vfprintf+0x200>
    2b32:	f5 01       	movw	r30, r10
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	9c 01       	movw	r18, r24
    2b3a:	44 27       	eor	r20, r20
    2b3c:	37 fd       	sbrc	r19, 7
    2b3e:	40 95       	com	r20
    2b40:	54 2f       	mov	r21, r20
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a8 0e       	add	r10, r24
    2b48:	b9 1e       	adc	r11, r25
    2b4a:	9f e6       	ldi	r25, 0x6F	; 111
    2b4c:	f9 22       	and	r15, r25
    2b4e:	57 ff       	sbrs	r21, 7
    2b50:	09 c0       	rjmp	.+18     	; 0x2b64 <vfprintf+0x21e>
    2b52:	50 95       	com	r21
    2b54:	40 95       	com	r20
    2b56:	30 95       	com	r19
    2b58:	21 95       	neg	r18
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b60:	e0 e8       	ldi	r30, 0x80	; 128
    2b62:	fe 2a       	or	r15, r30
    2b64:	ca 01       	movw	r24, r20
    2b66:	b9 01       	movw	r22, r18
    2b68:	a1 01       	movw	r20, r2
    2b6a:	2a e0       	ldi	r18, 0x0A	; 10
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__ultoa_invert>
    2b72:	d8 2e       	mov	r13, r24
    2b74:	d2 18       	sub	r13, r2
    2b76:	40 c0       	rjmp	.+128    	; 0x2bf8 <vfprintf+0x2b2>
    2b78:	95 37       	cpi	r25, 0x75	; 117
    2b7a:	29 f4       	brne	.+10     	; 0x2b86 <vfprintf+0x240>
    2b7c:	1f 2d       	mov	r17, r15
    2b7e:	1f 7e       	andi	r17, 0xEF	; 239
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	1d c0       	rjmp	.+58     	; 0x2bc0 <vfprintf+0x27a>
    2b86:	1f 2d       	mov	r17, r15
    2b88:	19 7f       	andi	r17, 0xF9	; 249
    2b8a:	9f 36       	cpi	r25, 0x6F	; 111
    2b8c:	61 f0       	breq	.+24     	; 0x2ba6 <vfprintf+0x260>
    2b8e:	90 37       	cpi	r25, 0x70	; 112
    2b90:	20 f4       	brcc	.+8      	; 0x2b9a <vfprintf+0x254>
    2b92:	98 35       	cpi	r25, 0x58	; 88
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <vfprintf+0x252>
    2b96:	ac c0       	rjmp	.+344    	; 0x2cf0 <vfprintf+0x3aa>
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <vfprintf+0x272>
    2b9a:	90 37       	cpi	r25, 0x70	; 112
    2b9c:	39 f0       	breq	.+14     	; 0x2bac <vfprintf+0x266>
    2b9e:	98 37       	cpi	r25, 0x78	; 120
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <vfprintf+0x25e>
    2ba2:	a6 c0       	rjmp	.+332    	; 0x2cf0 <vfprintf+0x3aa>
    2ba4:	04 c0       	rjmp	.+8      	; 0x2bae <vfprintf+0x268>
    2ba6:	28 e0       	ldi	r18, 0x08	; 8
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	0a c0       	rjmp	.+20     	; 0x2bc0 <vfprintf+0x27a>
    2bac:	10 61       	ori	r17, 0x10	; 16
    2bae:	14 fd       	sbrc	r17, 4
    2bb0:	14 60       	ori	r17, 0x04	; 4
    2bb2:	20 e1       	ldi	r18, 0x10	; 16
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	04 c0       	rjmp	.+8      	; 0x2bc0 <vfprintf+0x27a>
    2bb8:	14 fd       	sbrc	r17, 4
    2bba:	16 60       	ori	r17, 0x06	; 6
    2bbc:	20 e1       	ldi	r18, 0x10	; 16
    2bbe:	32 e0       	ldi	r19, 0x02	; 2
    2bc0:	17 ff       	sbrs	r17, 7
    2bc2:	08 c0       	rjmp	.+16     	; 0x2bd4 <vfprintf+0x28e>
    2bc4:	f5 01       	movw	r30, r10
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	44 e0       	ldi	r20, 0x04	; 4
    2bd0:	50 e0       	ldi	r21, 0x00	; 0
    2bd2:	08 c0       	rjmp	.+16     	; 0x2be4 <vfprintf+0x29e>
    2bd4:	f5 01       	movw	r30, r10
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	bc 01       	movw	r22, r24
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	42 e0       	ldi	r20, 0x02	; 2
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	a4 0e       	add	r10, r20
    2be6:	b5 1e       	adc	r11, r21
    2be8:	a1 01       	movw	r20, r2
    2bea:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__ultoa_invert>
    2bee:	d8 2e       	mov	r13, r24
    2bf0:	d2 18       	sub	r13, r2
    2bf2:	8f e7       	ldi	r24, 0x7F	; 127
    2bf4:	f8 2e       	mov	r15, r24
    2bf6:	f1 22       	and	r15, r17
    2bf8:	f6 fe       	sbrs	r15, 6
    2bfa:	0b c0       	rjmp	.+22     	; 0x2c12 <vfprintf+0x2cc>
    2bfc:	5e ef       	ldi	r21, 0xFE	; 254
    2bfe:	f5 22       	and	r15, r21
    2c00:	d9 14       	cp	r13, r9
    2c02:	38 f4       	brcc	.+14     	; 0x2c12 <vfprintf+0x2cc>
    2c04:	f4 fe       	sbrs	r15, 4
    2c06:	07 c0       	rjmp	.+14     	; 0x2c16 <vfprintf+0x2d0>
    2c08:	f2 fc       	sbrc	r15, 2
    2c0a:	05 c0       	rjmp	.+10     	; 0x2c16 <vfprintf+0x2d0>
    2c0c:	8f ee       	ldi	r24, 0xEF	; 239
    2c0e:	f8 22       	and	r15, r24
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <vfprintf+0x2d0>
    2c12:	1d 2d       	mov	r17, r13
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <vfprintf+0x2d2>
    2c16:	19 2d       	mov	r17, r9
    2c18:	f4 fe       	sbrs	r15, 4
    2c1a:	0d c0       	rjmp	.+26     	; 0x2c36 <vfprintf+0x2f0>
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ed 0d       	add	r30, r13
    2c20:	f1 1d       	adc	r31, r1
    2c22:	80 81       	ld	r24, Z
    2c24:	80 33       	cpi	r24, 0x30	; 48
    2c26:	19 f4       	brne	.+6      	; 0x2c2e <vfprintf+0x2e8>
    2c28:	99 ee       	ldi	r25, 0xE9	; 233
    2c2a:	f9 22       	and	r15, r25
    2c2c:	08 c0       	rjmp	.+16     	; 0x2c3e <vfprintf+0x2f8>
    2c2e:	1f 5f       	subi	r17, 0xFF	; 255
    2c30:	f2 fe       	sbrs	r15, 2
    2c32:	05 c0       	rjmp	.+10     	; 0x2c3e <vfprintf+0x2f8>
    2c34:	03 c0       	rjmp	.+6      	; 0x2c3c <vfprintf+0x2f6>
    2c36:	8f 2d       	mov	r24, r15
    2c38:	86 78       	andi	r24, 0x86	; 134
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <vfprintf+0x2f8>
    2c3c:	1f 5f       	subi	r17, 0xFF	; 255
    2c3e:	0f 2d       	mov	r16, r15
    2c40:	f3 fc       	sbrc	r15, 3
    2c42:	14 c0       	rjmp	.+40     	; 0x2c6c <vfprintf+0x326>
    2c44:	f0 fe       	sbrs	r15, 0
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <vfprintf+0x320>
    2c48:	1e 15       	cp	r17, r14
    2c4a:	10 f0       	brcs	.+4      	; 0x2c50 <vfprintf+0x30a>
    2c4c:	9d 2c       	mov	r9, r13
    2c4e:	0b c0       	rjmp	.+22     	; 0x2c66 <vfprintf+0x320>
    2c50:	9d 2c       	mov	r9, r13
    2c52:	9e 0c       	add	r9, r14
    2c54:	91 1a       	sub	r9, r17
    2c56:	1e 2d       	mov	r17, r14
    2c58:	06 c0       	rjmp	.+12     	; 0x2c66 <vfprintf+0x320>
    2c5a:	80 e2       	ldi	r24, 0x20	; 32
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	b3 01       	movw	r22, r6
    2c60:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    2c64:	1f 5f       	subi	r17, 0xFF	; 255
    2c66:	1e 15       	cp	r17, r14
    2c68:	c0 f3       	brcs	.-16     	; 0x2c5a <vfprintf+0x314>
    2c6a:	04 c0       	rjmp	.+8      	; 0x2c74 <vfprintf+0x32e>
    2c6c:	1e 15       	cp	r17, r14
    2c6e:	10 f4       	brcc	.+4      	; 0x2c74 <vfprintf+0x32e>
    2c70:	e1 1a       	sub	r14, r17
    2c72:	01 c0       	rjmp	.+2      	; 0x2c76 <vfprintf+0x330>
    2c74:	ee 24       	eor	r14, r14
    2c76:	04 ff       	sbrs	r16, 4
    2c78:	0f c0       	rjmp	.+30     	; 0x2c98 <vfprintf+0x352>
    2c7a:	80 e3       	ldi	r24, 0x30	; 48
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	b3 01       	movw	r22, r6
    2c80:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    2c84:	02 ff       	sbrs	r16, 2
    2c86:	1d c0       	rjmp	.+58     	; 0x2cc2 <vfprintf+0x37c>
    2c88:	01 fd       	sbrc	r16, 1
    2c8a:	03 c0       	rjmp	.+6      	; 0x2c92 <vfprintf+0x34c>
    2c8c:	88 e7       	ldi	r24, 0x78	; 120
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e c0       	rjmp	.+28     	; 0x2cae <vfprintf+0x368>
    2c92:	88 e5       	ldi	r24, 0x58	; 88
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0b c0       	rjmp	.+22     	; 0x2cae <vfprintf+0x368>
    2c98:	80 2f       	mov	r24, r16
    2c9a:	86 78       	andi	r24, 0x86	; 134
    2c9c:	91 f0       	breq	.+36     	; 0x2cc2 <vfprintf+0x37c>
    2c9e:	01 ff       	sbrs	r16, 1
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <vfprintf+0x360>
    2ca2:	8b e2       	ldi	r24, 0x2B	; 43
    2ca4:	01 c0       	rjmp	.+2      	; 0x2ca8 <vfprintf+0x362>
    2ca6:	80 e2       	ldi	r24, 0x20	; 32
    2ca8:	f7 fc       	sbrc	r15, 7
    2caa:	8d e2       	ldi	r24, 0x2D	; 45
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	b3 01       	movw	r22, r6
    2cb0:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    2cb4:	06 c0       	rjmp	.+12     	; 0x2cc2 <vfprintf+0x37c>
    2cb6:	80 e3       	ldi	r24, 0x30	; 48
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	b3 01       	movw	r22, r6
    2cbc:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    2cc0:	9a 94       	dec	r9
    2cc2:	d9 14       	cp	r13, r9
    2cc4:	c0 f3       	brcs	.-16     	; 0x2cb6 <vfprintf+0x370>
    2cc6:	da 94       	dec	r13
    2cc8:	f1 01       	movw	r30, r2
    2cca:	ed 0d       	add	r30, r13
    2ccc:	f1 1d       	adc	r31, r1
    2cce:	80 81       	ld	r24, Z
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	b3 01       	movw	r22, r6
    2cd4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    2cd8:	dd 20       	and	r13, r13
    2cda:	a9 f7       	brne	.-22     	; 0x2cc6 <vfprintf+0x380>
    2cdc:	06 c0       	rjmp	.+12     	; 0x2cea <vfprintf+0x3a4>
    2cde:	80 e2       	ldi	r24, 0x20	; 32
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	b3 01       	movw	r22, r6
    2ce4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <fputc>
    2ce8:	ea 94       	dec	r14
    2cea:	ee 20       	and	r14, r14
    2cec:	c1 f7       	brne	.-16     	; 0x2cde <vfprintf+0x398>
    2cee:	43 ce       	rjmp	.-890    	; 0x2976 <vfprintf+0x30>
    2cf0:	f3 01       	movw	r30, r6
    2cf2:	66 81       	ldd	r22, Z+6	; 0x06
    2cf4:	77 81       	ldd	r23, Z+7	; 0x07
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	2b 96       	adiw	r28, 0x0b	; 11
    2cfa:	e2 e1       	ldi	r30, 0x12	; 18
    2cfc:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__>

00002d00 <strnlen_P>:
    2d00:	fc 01       	movw	r30, r24
    2d02:	05 90       	lpm	r0, Z+
    2d04:	61 50       	subi	r22, 0x01	; 1
    2d06:	70 40       	sbci	r23, 0x00	; 0
    2d08:	01 10       	cpse	r0, r1
    2d0a:	d8 f7       	brcc	.-10     	; 0x2d02 <strnlen_P+0x2>
    2d0c:	80 95       	com	r24
    2d0e:	90 95       	com	r25
    2d10:	8e 0f       	add	r24, r30
    2d12:	9f 1f       	adc	r25, r31
    2d14:	08 95       	ret

00002d16 <strnlen>:
    2d16:	fc 01       	movw	r30, r24
    2d18:	61 50       	subi	r22, 0x01	; 1
    2d1a:	70 40       	sbci	r23, 0x00	; 0
    2d1c:	01 90       	ld	r0, Z+
    2d1e:	01 10       	cpse	r0, r1
    2d20:	d8 f7       	brcc	.-10     	; 0x2d18 <strnlen+0x2>
    2d22:	80 95       	com	r24
    2d24:	90 95       	com	r25
    2d26:	8e 0f       	add	r24, r30
    2d28:	9f 1f       	adc	r25, r31
    2d2a:	08 95       	ret

00002d2c <fputc>:
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	8c 01       	movw	r16, r24
    2d36:	eb 01       	movw	r28, r22
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	81 ff       	sbrs	r24, 1
    2d3c:	1b c0       	rjmp	.+54     	; 0x2d74 <fputc+0x48>
    2d3e:	82 ff       	sbrs	r24, 2
    2d40:	0d c0       	rjmp	.+26     	; 0x2d5c <fputc+0x30>
    2d42:	2e 81       	ldd	r18, Y+6	; 0x06
    2d44:	3f 81       	ldd	r19, Y+7	; 0x07
    2d46:	8c 81       	ldd	r24, Y+4	; 0x04
    2d48:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4a:	28 17       	cp	r18, r24
    2d4c:	39 07       	cpc	r19, r25
    2d4e:	64 f4       	brge	.+24     	; 0x2d68 <fputc+0x3c>
    2d50:	e8 81       	ld	r30, Y
    2d52:	f9 81       	ldd	r31, Y+1	; 0x01
    2d54:	01 93       	st	Z+, r16
    2d56:	f9 83       	std	Y+1, r31	; 0x01
    2d58:	e8 83       	st	Y, r30
    2d5a:	06 c0       	rjmp	.+12     	; 0x2d68 <fputc+0x3c>
    2d5c:	e8 85       	ldd	r30, Y+8	; 0x08
    2d5e:	f9 85       	ldd	r31, Y+9	; 0x09
    2d60:	80 2f       	mov	r24, r16
    2d62:	09 95       	icall
    2d64:	89 2b       	or	r24, r25
    2d66:	31 f4       	brne	.+12     	; 0x2d74 <fputc+0x48>
    2d68:	8e 81       	ldd	r24, Y+6	; 0x06
    2d6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d6c:	01 96       	adiw	r24, 0x01	; 1
    2d6e:	9f 83       	std	Y+7, r25	; 0x07
    2d70:	8e 83       	std	Y+6, r24	; 0x06
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <fputc+0x4c>
    2d74:	0f ef       	ldi	r16, 0xFF	; 255
    2d76:	1f ef       	ldi	r17, 0xFF	; 255
    2d78:	c8 01       	movw	r24, r16
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	1f 91       	pop	r17
    2d80:	0f 91       	pop	r16
    2d82:	08 95       	ret

00002d84 <__ultoa_invert>:
    2d84:	fa 01       	movw	r30, r20
    2d86:	aa 27       	eor	r26, r26
    2d88:	28 30       	cpi	r18, 0x08	; 8
    2d8a:	51 f1       	breq	.+84     	; 0x2de0 <__ultoa_invert+0x5c>
    2d8c:	20 31       	cpi	r18, 0x10	; 16
    2d8e:	81 f1       	breq	.+96     	; 0x2df0 <__ultoa_invert+0x6c>
    2d90:	e8 94       	clt
    2d92:	6f 93       	push	r22
    2d94:	6e 7f       	andi	r22, 0xFE	; 254
    2d96:	6e 5f       	subi	r22, 0xFE	; 254
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	af 4f       	sbci	r26, 0xFF	; 255
    2da0:	b1 e0       	ldi	r27, 0x01	; 1
    2da2:	3e d0       	rcall	.+124    	; 0x2e20 <__ultoa_invert+0x9c>
    2da4:	b4 e0       	ldi	r27, 0x04	; 4
    2da6:	3c d0       	rcall	.+120    	; 0x2e20 <__ultoa_invert+0x9c>
    2da8:	67 0f       	add	r22, r23
    2daa:	78 1f       	adc	r23, r24
    2dac:	89 1f       	adc	r24, r25
    2dae:	9a 1f       	adc	r25, r26
    2db0:	a1 1d       	adc	r26, r1
    2db2:	68 0f       	add	r22, r24
    2db4:	79 1f       	adc	r23, r25
    2db6:	8a 1f       	adc	r24, r26
    2db8:	91 1d       	adc	r25, r1
    2dba:	a1 1d       	adc	r26, r1
    2dbc:	6a 0f       	add	r22, r26
    2dbe:	71 1d       	adc	r23, r1
    2dc0:	81 1d       	adc	r24, r1
    2dc2:	91 1d       	adc	r25, r1
    2dc4:	a1 1d       	adc	r26, r1
    2dc6:	20 d0       	rcall	.+64     	; 0x2e08 <__ultoa_invert+0x84>
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <__ultoa_invert+0x48>
    2dca:	68 94       	set
    2dcc:	3f 91       	pop	r19
    2dce:	2a e0       	ldi	r18, 0x0A	; 10
    2dd0:	26 9f       	mul	r18, r22
    2dd2:	11 24       	eor	r1, r1
    2dd4:	30 19       	sub	r19, r0
    2dd6:	30 5d       	subi	r19, 0xD0	; 208
    2dd8:	31 93       	st	Z+, r19
    2dda:	de f6       	brtc	.-74     	; 0x2d92 <__ultoa_invert+0xe>
    2ddc:	cf 01       	movw	r24, r30
    2dde:	08 95       	ret
    2de0:	46 2f       	mov	r20, r22
    2de2:	47 70       	andi	r20, 0x07	; 7
    2de4:	40 5d       	subi	r20, 0xD0	; 208
    2de6:	41 93       	st	Z+, r20
    2de8:	b3 e0       	ldi	r27, 0x03	; 3
    2dea:	0f d0       	rcall	.+30     	; 0x2e0a <__ultoa_invert+0x86>
    2dec:	c9 f7       	brne	.-14     	; 0x2de0 <__ultoa_invert+0x5c>
    2dee:	f6 cf       	rjmp	.-20     	; 0x2ddc <__ultoa_invert+0x58>
    2df0:	46 2f       	mov	r20, r22
    2df2:	4f 70       	andi	r20, 0x0F	; 15
    2df4:	40 5d       	subi	r20, 0xD0	; 208
    2df6:	4a 33       	cpi	r20, 0x3A	; 58
    2df8:	18 f0       	brcs	.+6      	; 0x2e00 <__ultoa_invert+0x7c>
    2dfa:	49 5d       	subi	r20, 0xD9	; 217
    2dfc:	31 fd       	sbrc	r19, 1
    2dfe:	40 52       	subi	r20, 0x20	; 32
    2e00:	41 93       	st	Z+, r20
    2e02:	02 d0       	rcall	.+4      	; 0x2e08 <__ultoa_invert+0x84>
    2e04:	a9 f7       	brne	.-22     	; 0x2df0 <__ultoa_invert+0x6c>
    2e06:	ea cf       	rjmp	.-44     	; 0x2ddc <__ultoa_invert+0x58>
    2e08:	b4 e0       	ldi	r27, 0x04	; 4
    2e0a:	a6 95       	lsr	r26
    2e0c:	97 95       	ror	r25
    2e0e:	87 95       	ror	r24
    2e10:	77 95       	ror	r23
    2e12:	67 95       	ror	r22
    2e14:	ba 95       	dec	r27
    2e16:	c9 f7       	brne	.-14     	; 0x2e0a <__ultoa_invert+0x86>
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	61 05       	cpc	r22, r1
    2e1c:	71 05       	cpc	r23, r1
    2e1e:	08 95       	ret
    2e20:	9b 01       	movw	r18, r22
    2e22:	ac 01       	movw	r20, r24
    2e24:	0a 2e       	mov	r0, r26
    2e26:	06 94       	lsr	r0
    2e28:	57 95       	ror	r21
    2e2a:	47 95       	ror	r20
    2e2c:	37 95       	ror	r19
    2e2e:	27 95       	ror	r18
    2e30:	ba 95       	dec	r27
    2e32:	c9 f7       	brne	.-14     	; 0x2e26 <__ultoa_invert+0xa2>
    2e34:	62 0f       	add	r22, r18
    2e36:	73 1f       	adc	r23, r19
    2e38:	84 1f       	adc	r24, r20
    2e3a:	95 1f       	adc	r25, r21
    2e3c:	a0 1d       	adc	r26, r0
    2e3e:	08 95       	ret

00002e40 <_exit>:
    2e40:	f8 94       	cli

00002e42 <__stop_program>:
    2e42:	ff cf       	rjmp	.-2      	; 0x2e42 <__stop_program>
